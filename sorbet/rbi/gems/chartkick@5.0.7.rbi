# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `chartkick` gem.
# Please instead update this file by running `bin/tapioca gem chartkick`.


# for both multiple series and
# making sure hash order is preserved in JavaScript
#
# source://chartkick//lib/chartkick/core_ext.rb#4
class Array
  include ::Enumerable

  # source://chartkick//lib/chartkick/core_ext.rb#5
  def chart_json; end
end

# source://chartkick//lib/chartkick/helper.rb#1
module Chartkick
  class << self
    # Returns the value of attribute content_for.
    #
    # source://chartkick//lib/chartkick.rb#23
    def content_for; end

    # Sets the attribute content_for
    #
    # @param value the value to set the attribute content_for to.
    #
    # source://chartkick//lib/chartkick.rb#23
    def content_for=(_arg0); end

    # Returns the value of attribute options.
    #
    # source://chartkick//lib/chartkick.rb#24
    def options; end

    # Sets the attribute options
    #
    # @param value the value to set the attribute options to.
    #
    # source://chartkick//lib/chartkick.rb#24
    def options=(_arg0); end
  end
end

# source://chartkick//lib/chartkick/engine.rb#2
class Chartkick::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://chartkick//lib/chartkick/helper.rb#2
module Chartkick::Helper
  # source://chartkick//lib/chartkick/helper.rb#19
  def area_chart(data_source, **options); end

  # source://chartkick//lib/chartkick/helper.rb#15
  def bar_chart(data_source, **options); end

  # source://chartkick//lib/chartkick/helper.rb#11
  def column_chart(data_source, **options); end

  # source://chartkick//lib/chartkick/helper.rb#27
  def geo_chart(data_source, **options); end

  # source://chartkick//lib/chartkick/helper.rb#3
  def line_chart(data_source, **options); end

  # source://chartkick//lib/chartkick/helper.rb#7
  def pie_chart(data_source, **options); end

  # source://chartkick//lib/chartkick/helper.rb#23
  def scatter_chart(data_source, **options); end

  # source://chartkick//lib/chartkick/helper.rb#31
  def timeline(data_source, **options); end

  private

  # don't break out options since need to merge with default options
  #
  # source://chartkick//lib/chartkick/helper.rb#38
  def chartkick_chart(klass, data_source, **options); end
end

# source://chartkick//lib/chartkick/utils.rb#2
module Chartkick::Utils
  class << self
    # https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/hash/deep_merge.rb
    #
    # source://chartkick//lib/chartkick/utils.rb#4
    def deep_merge(hash_a, hash_b); end

    # source://chartkick//lib/chartkick/utils.rb#16
    def json_escape(s); end
  end
end

# from https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/string/output_safety.rb
#
# source://chartkick//lib/chartkick/utils.rb#14
Chartkick::Utils::JSON_ESCAPE = T.let(T.unsafe(nil), Hash)

# source://chartkick//lib/chartkick/utils.rb#15
Chartkick::Utils::JSON_ESCAPE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://chartkick//lib/chartkick/version.rb#2
Chartkick::VERSION = T.let(T.unsafe(nil), String)

# source://chartkick//lib/chartkick/core_ext.rb#16
class Hash
  include ::Enumerable

  # source://chartkick//lib/chartkick/core_ext.rb#17
  def chart_json; end
end

# source://chartkick//lib/chartkick/sinatra.rb#3
class Sinatra::Base
  include ::Chartkick::Helper

  # source://sinatra/4.0.0/lib/sinatra/base.rb#980
  def initialize(app = T.unsafe(nil), **_kwargs); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#977
  def app; end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#977
  def app=(_arg0); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#989
  def call(env); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#993
  def call!(env); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#977
  def env; end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#977
  def env=(_arg0); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1040
  def forward; end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1027
  def halt(*response); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#977
  def params; end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#977
  def params=(_arg0); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1035
  def pass(&block); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#977
  def request; end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#977
  def request=(_arg0); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#977
  def response; end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#977
  def response=(_arg0); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1021
  def settings; end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#978
  def template_cache; end

  private

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1176
  def dispatch!; end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1268
  def dump_errors!(boom); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1249
  def error_block!(key, *block_params); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1054
  def filter!(type, base = T.unsafe(nil), &block); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1922
  def force_encoding(*args); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1203
  def handle_exception!(boom); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1160
  def invoke(&block); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1097
  def process_route(pattern, conditions, block = T.unsafe(nil), values = T.unsafe(nil)); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1063
  def route!(base = T.unsafe(nil), pass_block = T.unsafe(nil)); end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1088
  def route_eval; end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1135
  def route_missing; end

  # source://sinatra/4.0.0/lib/sinatra/base.rb#1143
  def static!(options = T.unsafe(nil)); end

  class << self
    def absolute_redirects; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def absolute_redirects=(val); end

    def absolute_redirects?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1362
    def add_charset; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def add_charset=(val); end

    def add_charset?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1493
    def add_filter(type, path = T.unsafe(nil), **options, &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1488
    def after(path = T.unsafe(nil), **options, &block); end

    def app_file; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def app_file=(val); end

    def app_file?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1481
    def before(path = T.unsafe(nil), **options, &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1965
    def bind; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def bind=(val); end

    def bind?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1665
    def build(app); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1673
    def call(env); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1679
    def caller_files; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1300
    def callers_to_ignore; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1507
    def condition(name = T.unsafe(nil), &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1574
    def configure(*envs); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1362
    def default_content_type; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def default_content_type=(val); end

    def default_content_type?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1362
    def default_encoding; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def default_encoding=(val); end

    def default_encoding?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1538
    def delete(path, opts = T.unsafe(nil), &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1568
    def development?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1388
    def disable(*opts); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1930
    def dump_errors; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def dump_errors=(val); end

    def dump_errors?; end
    def empty_path_info; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def empty_path_info=(val); end

    def empty_path_info?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1383
    def enable(*opts); end

    def environment; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def environment=(val); end

    def environment?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1395
    def error(*codes, &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1298
    def errors; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1323
    def extensions; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1298
    def filters; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1909
    def force_encoding(data, encoding = T.unsafe(nil)); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1526
    def get(path, opts = T.unsafe(nil), &block); end

    def handler_name; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def handler_name=(val); end

    def handler_name?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1540
    def head(path, opts = T.unsafe(nil), &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1552
    def helpers(*extensions, &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1421
    def inline_templates=(file = T.unsafe(nil)); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1415
    def layout(name = T.unsafe(nil), &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1546
    def link(path, opts = T.unsafe(nil), &block); end

    def lock; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def lock=(val); end

    def lock?; end
    def logging; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def logging=(val); end

    def logging?; end
    def method_override; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def method_override=(val); end

    def method_override?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def methodoverride=(val); end

    def methodoverride?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1332
    def middleware; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1454
    def mime_type(type, value = T.unsafe(nil)); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1467
    def mime_types(type); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1362
    def mustermann_opts; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1370
    def mustermann_opts=(val); end

    def mustermann_opts?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1657
    def new(*args, **_arg1, &block); end

    def new!(*_arg0); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1404
    def not_found(&block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1497
    def on_start(&on_start_callback); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1298
    def on_start_callback; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1501
    def on_stop(&on_stop_callback); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1298
    def on_stop_callback; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1542
    def options(path, opts = T.unsafe(nil), &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1544
    def patch(path, opts = T.unsafe(nil), &block); end

    def port; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def port=(val); end

    def port?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1536
    def post(path, opts = T.unsafe(nil), &block); end

    def prefixed_redirects; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def prefixed_redirects=(val); end

    def prefixed_redirects?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1569
    def production?; end

    def protection; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def protection=(val); end

    def protection?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1647
    def prototype; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1511
    def public=(value); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1520
    def public_dir; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1516
    def public_dir=(value); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1988
    def public_folder; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def public_folder=(val); end

    def public_folder?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1534
    def put(path, opts = T.unsafe(nil), &block); end

    def quiet; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def quiet=(val); end

    def quiet?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1586
    def quit!; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1929
    def raise_errors; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def raise_errors=(val); end

    def raise_errors?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1559
    def register(*extensions, &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1984
    def reload_templates; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def reload_templates=(val); end

    def reload_templates?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1306
    def reset!; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1982
    def root; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def root=(val); end

    def root?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1298
    def routes; end

    def run; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1603
    def run!(options = T.unsafe(nil), &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def run=(val); end

    def run?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1642
    def running?; end

    def running_server; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def running_server=(val); end

    def running_server?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1362
    def server; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def server=(val); end

    def server?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1362
    def session_secret; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def session_secret=(val); end

    def session_secret?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1362
    def session_store; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def session_store=(val); end

    def session_store?; end
    def sessions; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def sessions=(val); end

    def sessions?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1342
    def set(option, value = T.unsafe(nil), ignore_setter = T.unsafe(nil), &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1016
    def settings; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1931
    def show_exceptions; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def show_exceptions=(val); end

    def show_exceptions?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1603
    def start!(options = T.unsafe(nil), &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1989
    def static; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def static=(val); end

    def static?; end
    def static_cache_control; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def static_cache_control=(val); end

    def static_cache_control?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1586
    def stop!; end

    def strict_paths; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def strict_paths=(val); end

    def strict_paths?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1409
    def template(name, &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1298
    def templates; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1570
    def test?; end

    def threaded; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def threaded=(val); end

    def threaded?; end
    def traps; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def traps=(val); end

    def traps?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1548
    def unlink(path, opts = T.unsafe(nil), &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1579
    def use(middleware, *args, **_arg2, &block); end

    def use_code; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def use_code=(val); end

    def use_code?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1983
    def views; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def views=(val); end

    def views?; end
    def x_cascade; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1361
    def x_cascade=(val); end

    def x_cascade?; end

    private

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1739
    def agent(pattern); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1900
    def cleaned_caller(keep = T.unsafe(nil)); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1810
    def compile(path, route_mustermann_opts = T.unsafe(nil)); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1790
    def compile!(verb, path, block, **options); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1725
    def define_singleton(name, content = T.unsafe(nil)); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1783
    def generate_method(method_name, &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1733
    def host_name(pattern); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1879
    def inherited(subclass); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1779
    def invoke_hook(name, *args); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1752
    def provides(*types); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1771
    def route(verb, path, options = T.unsafe(nil), &block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1841
    def setup_common_logger(builder); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1845
    def setup_custom_logger(builder); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1814
    def setup_default_middleware(builder); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1828
    def setup_logging(builder); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1824
    def setup_middleware(builder); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1837
    def setup_null_logger(builder); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1853
    def setup_protection(builder); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1870
    def setup_sessions(builder); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1709
    def setup_traps; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1686
    def start_server(handler, server_settings, handler_name); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1705
    def suppress_messages?; end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1886
    def synchronize(&block); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1739
    def user_agent(pattern); end

    # source://sinatra/4.0.0/lib/sinatra/base.rb#1895
    def warn_for_deprecation(message); end
  end
end
