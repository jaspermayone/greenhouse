# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mission_control-jobs` gem.
# Please instead update this file by running `bin/tapioca gem mission_control-jobs`.


# source://mission_control-jobs//lib/active_job/errors/invalid_operation.rb#1
module ActiveJob
  class << self
    # source://activejob/7.1.3.4/lib/active_job/queue_adapter.rb#7
    def adapter_name(adapter); end

    # source://activejob/7.1.3.4/lib/active_job/deprecator.rb#4
    def deprecator; end

    # source://activejob/7.1.3.4/lib/active_job/gem_version.rb#5
    def gem_version; end

    # source://activejob/7.1.3.4/lib/active_job/enqueuing.rb#16
    def perform_all_later(*jobs); end

    # source://activejob/7.1.3.4/lib/active_job.rb#53
    def use_big_decimal_serializer; end

    # source://activejob/7.1.3.4/lib/active_job.rb#53
    def use_big_decimal_serializer=(_arg0); end

    # source://activejob/7.1.3.4/lib/active_job.rb#61
    def verbose_enqueue_logs; end

    # source://activejob/7.1.3.4/lib/active_job.rb#61
    def verbose_enqueue_logs=(_arg0); end

    # source://activejob/7.1.3.4/lib/active_job/version.rb#7
    def version; end

    private

    # source://activejob/7.1.3.4/lib/active_job/instrumentation.rb#6
    def instrument_enqueue_all(queue_adapter, jobs); end
  end
end

class ActiveJob::Base
  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#963
  def _enqueue_callbacks; end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#963
  def _perform_callbacks; end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#951
  def _run_enqueue_callbacks(&block); end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#951
  def _run_perform_callbacks(&block); end

  # source://activejob/7.1.3.4/lib/active_job/exceptions.rb#12
  def after_discard_procs; end

  # source://activejob/7.1.3.4/lib/active_job/exceptions.rb#12
  def after_discard_procs=(_arg0); end

  # source://activejob/7.1.3.4/lib/active_job/exceptions.rb#12
  def after_discard_procs?; end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def blocked_by; end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def blocked_by=(_arg0); end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def blocked_until; end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def blocked_until=(_arg0); end

  # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#14
  def concurrency_duration; end

  # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#14
  def concurrency_duration=(_arg0); end

  # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#14
  def concurrency_duration?; end

  # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#13
  def concurrency_limit; end

  # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#13
  def concurrency_limit=(_arg0); end

  # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#13
  def concurrency_limit?; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def current_queue_adapter; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def current_queue_adapter=(obj); end

  # source://mission_control-jobs//lib/active_job/querying.rb#7
  def default_page_size; end

  # source://mission_control-jobs//lib/active_job/querying.rb#7
  def default_page_size=(_arg0); end

  # source://mission_control-jobs//lib/active_job/querying.rb#7
  def default_page_size?; end

  # source://mission_control-jobs//lib/active_job/failed.rb#5
  def failed_at; end

  # source://mission_control-jobs//lib/active_job/failed.rb#5
  def failed_at=(_arg0); end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def finished_at; end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def finished_at=(_arg0); end

  # source://mission_control-jobs//lib/active_job/failed.rb#5
  def last_execution_error; end

  # source://mission_control-jobs//lib/active_job/failed.rb#5
  def last_execution_error=(_arg0); end

  # source://activejob/7.1.3.4/lib/active_job/logging.rb#11
  def logger; end

  # source://activejob/7.1.3.4/lib/active_job/logging.rb#11
  def logger=(val); end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def position; end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def position=(_arg0); end

  # source://activejob/7.1.3.4/lib/active_job/queue_adapter.rb#26
  def queue_adapter(&block); end

  # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#57
  def queue_name_prefix; end

  # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#57
  def queue_name_prefix=(_arg0); end

  # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#57
  def queue_name_prefix?; end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def raw_data; end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def raw_data=(_arg0); end

  # source://activesupport/7.1.3.4/lib/active_support/rescuable.rb#15
  def rescue_handlers; end

  # source://activesupport/7.1.3.4/lib/active_support/rescuable.rb#15
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.1.3.4/lib/active_support/rescuable.rb#15
  def rescue_handlers?; end

  # source://mission_control-jobs//lib/active_job/executing.rb#8
  def serialized_arguments; end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def started_at; end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def started_at=(_arg0); end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def status; end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def status=(_arg0); end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def worker_id; end

  # source://mission_control-jobs//lib/active_job/executing.rb#7
  def worker_id=(_arg0); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#955
    def _enqueue_callbacks; end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#959
    def _enqueue_callbacks=(value); end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#955
    def _perform_callbacks; end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#959
    def _perform_callbacks=(value); end

    # source://activejob/7.1.3.4/lib/active_job/queue_adapter.rb#24
    def _queue_adapter; end

    # source://activejob/7.1.3.4/lib/active_job/queue_adapter.rb#24
    def _queue_adapter=(value); end

    # source://activejob/7.1.3.4/lib/active_job/queue_adapter.rb#23
    def _queue_adapter_name; end

    # source://activejob/7.1.3.4/lib/active_job/queue_adapter.rb#23
    def _queue_adapter_name=(value); end

    # source://activejob/7.1.3.4/lib/active_job/test_helper.rb#19
    def _test_adapter; end

    # source://activejob/7.1.3.4/lib/active_job/test_helper.rb#19
    def _test_adapter=(value); end

    # source://activejob/7.1.3.4/lib/active_job/exceptions.rb#12
    def after_discard_procs; end

    # source://activejob/7.1.3.4/lib/active_job/exceptions.rb#12
    def after_discard_procs=(value); end

    # source://activejob/7.1.3.4/lib/active_job/exceptions.rb#12
    def after_discard_procs?; end

    # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#14
    def concurrency_duration; end

    # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#14
    def concurrency_duration=(value); end

    # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#14
    def concurrency_duration?; end

    # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#11
    def concurrency_group; end

    # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#11
    def concurrency_group=(value); end

    # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#11
    def concurrency_group?; end

    # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#10
    def concurrency_key; end

    # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#10
    def concurrency_key=(value); end

    # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#10
    def concurrency_key?; end

    # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#13
    def concurrency_limit; end

    # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#13
    def concurrency_limit=(value); end

    # source://solid_queue/0.3.2/lib/active_job/concurrency_controls.rb#13
    def concurrency_limit?; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#49
    def current_queue_adapter; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def current_queue_adapter=(obj); end

    # source://mission_control-jobs//lib/active_job/querying.rb#7
    def default_page_size; end

    # source://mission_control-jobs//lib/active_job/querying.rb#7
    def default_page_size=(value); end

    # source://mission_control-jobs//lib/active_job/querying.rb#7
    def default_page_size?; end

    # source://activejob/7.1.3.4/lib/active_job/logging.rb#12
    def log_arguments; end

    # source://activejob/7.1.3.4/lib/active_job/logging.rb#12
    def log_arguments=(value); end

    # source://activejob/7.1.3.4/lib/active_job/logging.rb#12
    def log_arguments?; end

    # source://activejob/7.1.3.4/lib/active_job/logging.rb#11
    def logger; end

    # source://activejob/7.1.3.4/lib/active_job/logging.rb#11
    def logger=(val); end

    # source://activejob/7.1.3.4/lib/active_job/queue_priority.rb#49
    def priority; end

    # source://activejob/7.1.3.4/lib/active_job/queue_priority.rb#49
    def priority=(value); end

    # source://activejob/7.1.3.4/lib/active_job/queue_priority.rb#49
    def priority?; end

    # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#55
    def queue_name; end

    # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#55
    def queue_name=(value); end

    # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#55
    def queue_name?; end

    # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#56
    def queue_name_delimiter; end

    # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#56
    def queue_name_delimiter=(value); end

    # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#56
    def queue_name_delimiter?; end

    # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#57
    def queue_name_prefix; end

    # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#57
    def queue_name_prefix=(value); end

    # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#57
    def queue_name_prefix?; end

    # source://activesupport/7.1.3.4/lib/active_support/rescuable.rb#15
    def rescue_handlers; end

    # source://activesupport/7.1.3.4/lib/active_support/rescuable.rb#15
    def rescue_handlers=(value); end

    # source://activesupport/7.1.3.4/lib/active_support/rescuable.rb#15
    def rescue_handlers?; end

    # source://activejob/7.1.3.4/lib/active_job/exceptions.rb#11
    def retry_jitter; end

    # source://activejob/7.1.3.4/lib/active_job/exceptions.rb#11
    def retry_jitter=(value); end
  end
end

# source://mission_control-jobs//lib/active_job/errors/invalid_operation.rb#2
module ActiveJob::Errors; end

# source://mission_control-jobs//lib/active_job/errors/invalid_operation.rb#3
class ActiveJob::Errors::InvalidOperation < ::StandardError; end

# source://mission_control-jobs//lib/active_job/errors/job_not_found_error.rb#3
class ActiveJob::Errors::JobNotFoundError < ::StandardError
  # @return [JobNotFoundError] a new instance of JobNotFoundError
  #
  # source://mission_control-jobs//lib/active_job/errors/job_not_found_error.rb#6
  def initialize(job_or_job_id, job_relation); end

  # Returns the value of attribute job_relation.
  #
  # source://mission_control-jobs//lib/active_job/errors/job_not_found_error.rb#4
  def job_relation; end
end

# source://mission_control-jobs//lib/active_job/errors/query_error.rb#3
class ActiveJob::Errors::QueryError < ::StandardError; end

# TODO: These (or a version of them) should be moved to +ActiveJob::Core+
# and related concerns when upstreamed.
#
# source://mission_control-jobs//lib/active_job/executing.rb#3
module ActiveJob::Executing
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Executing::ClassMethods

  # source://mission_control-jobs//lib/active_job/executing.rb#23
  def discard; end

  # source://mission_control-jobs//lib/active_job/executing.rb#27
  def dispatch; end

  # source://mission_control-jobs//lib/active_job/executing.rb#19
  def retry; end

  private

  # source://mission_control-jobs//lib/active_job/executing.rb#32
  def jobs_relation_for_discarding; end
end

# source://mission_control-jobs//lib/active_job/executing.rb#0
module ActiveJob::Executing::ClassMethods
  # source://mission_control-jobs//lib/active_job/executing.rb#14
  def queue_adapter; end
end

# source://mission_control-jobs//lib/active_job/execution_error.rb#4
class ActiveJob::ExecutionError < ::Struct
  def backtrace; end
  def backtrace=(_); end
  def error_class; end
  def error_class=(_); end
  def message; end
  def message=(_); end

  # source://mission_control-jobs//lib/active_job/execution_error.rb#5
  def to_s; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mission_control-jobs//lib/active_job/failed.rb#1
module ActiveJob::Failed
  extend ::ActiveSupport::Concern
end

# A proxy for managing jobs without having to load the corresponding
# job class.
#
# This is useful for managing jobs without having the job classes
# present in the code base.
#
# source://mission_control-jobs//lib/active_job/job_proxy.rb#6
class ActiveJob::JobProxy < ::ActiveJob::Base
  # @return [JobProxy] a new instance of JobProxy
  #
  # source://mission_control-jobs//lib/active_job/job_proxy.rb#11
  def initialize(job_data); end

  # source://mission_control-jobs//lib/active_job/job_proxy.rb#28
  def blocked?; end

  # source://mission_control-jobs//lib/active_job/job_proxy.rb#28
  def failed?; end

  # source://mission_control-jobs//lib/active_job/job_proxy.rb#28
  def finished?; end

  # source://mission_control-jobs//lib/active_job/job_proxy.rb#28
  def in_progress?; end

  # Returns the value of attribute job_class_name.
  #
  # source://mission_control-jobs//lib/active_job/job_proxy.rb#9
  def job_class_name; end

  # source://mission_control-jobs//lib/active_job/job_proxy.rb#28
  def pending?; end

  # @raise [UnsupportedError]
  #
  # source://mission_control-jobs//lib/active_job/job_proxy.rb#23
  def perform_now; end

  # source://mission_control-jobs//lib/active_job/job_proxy.rb#28
  def scheduled?; end

  # source://mission_control-jobs//lib/active_job/job_proxy.rb#17
  def serialize; end
end

# source://mission_control-jobs//lib/active_job/job_proxy.rb#7
class ActiveJob::JobProxy::UnsupportedError < ::StandardError; end

# A relation of jobs that can be filtered and acted on.
#
# Relations of jobs are normally fetched via +ActiveJob.jobs+
# or through a given queue (+ActiveJob::Queue#jobs+).
#
# This class offers a fluid interface to query a subset of jobs. For
# example:
#
#   queue = ActiveJob.queues[:default]
#   queue.jobs.limit(10).where(job_class_name: "DummyJob").last
#
# Relations are enumerable, so you can use +Enumerable+ methods on them.
# Notice however that using these methods will imply loading all the relation
# in memory, which could introduce performance concerns.
#
# Internally, +ActiveJob+ will always use paginated queries to the underlying
# queue adapter. The page size can be controlled via +config.active_job.default_page_size+
# (1000 by default).
#
# There are additional performance concerns depending on the configured
# adapter. Please check +ActiveJob::Relation#where+, +ActiveJob::Relation#count+.
#
# source://mission_control-jobs//lib/active_job/jobs_relation.rb#22
class ActiveJob::JobsRelation
  include ::Enumerable

  # @return [JobsRelation] a new instance of JobsRelation
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#36
  def initialize(queue_adapter: T.unsafe(nil), default_page_size: T.unsafe(nil)); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#31
  def [](*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#74
  def blocked; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#78
  def blocked?; end

  # Returns the number of jobs in the relation.
  #
  # When filtering jobs, if the adapter doesn't support the filter(s)
  # directly, this will load all the jobs in memory to filter them.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#97
  def count; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#29
  def default_page_size; end

  # Discard all the jobs in the relation.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#146
  def discard_all; end

  # Discard the provided job.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#152
  def discard_job(job); end

  # Dispatch the provided job.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#157
  def dispatch_job(job); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#122
  def each(&block); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#108
  def empty?; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#74
  def failed; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#78
  def failed?; end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#209
  def filtering_needed?; end

  # Find a job by id.
  #
  # Returns nil when not found.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#164
  def find_by_id(job_id); end

  # Find a job by id.
  #
  # Raises +ActiveJob::Errors::JobNotFoundError+ when not found.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#171
  def find_by_id!(job_id); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#74
  def finished; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#78
  def finished?; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#188
  def in_batches(of: T.unsafe(nil), order: T.unsafe(nil), &block); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#74
  def in_progress; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#78
  def in_progress?; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#112
  def inspect; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#29
  def job_class_name; end

  # Returns an array of jobs class names in the first +from_first+ jobs.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#176
  def job_class_names(from_first: T.unsafe(nil)); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#31
  def last(*_arg0, **_arg1, &_arg2); end

  # Returns the number of jobs in the relation.
  #
  # When filtering jobs, if the adapter doesn't support the filter(s)
  # directly, this will load all the jobs in memory to filter them.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#97
  def length; end

  # Sets the max number of jobs to fetch in the query.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#89
  def limit(limit); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#29
  def limit_value; end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#205
  def limit_value_provided?; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#32
  def logger(&block); end

  # Sets an offset for the jobs-fetching query. The first position is 0.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#84
  def offset(offset); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#29
  def offset_value; end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#201
  def paginated?; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#74
  def pending; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#78
  def pending?; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#29
  def queue_name; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#29
  def recurring_task_id; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#180
  def reload; end

  # Retry all the jobs in the queue.
  #
  # This operation is only valid for sets of failed jobs. It will
  # raise an error +ActiveJob::Errors::InvalidOperation+ otherwise.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#130
  def retry_all; end

  # Retry the provided job.
  #
  # This operation is only valid for sets of failed jobs. It will
  # raise an error +ActiveJob::Errors::InvalidOperation+ otherwise.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#140
  def retry_job(job); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#31
  def reverse(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#74
  def scheduled; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#78
  def scheduled?; end

  # Returns the number of jobs in the relation.
  #
  # When filtering jobs, if the adapter doesn't support the filter(s)
  # directly, this will load all the jobs in memory to filter them.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#97
  def size; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#29
  def status; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#112
  def to_s; end

  # Returns a +ActiveJob::JobsRelation+ with the configured filtering options.
  #
  # === Options
  #
  # * <tt>:job_class_name</tt> - To only include the jobs of a given class.
  #   Depending on the configured queue adapter, this will perform the
  #   filtering in memory, which could introduce performance concerns
  #   for large sets of jobs.
  # * <tt>:queue_name</tt> - To only include the jobs in the provided queue.
  # * <tt>:worker_id</tt> - To only include the jobs processed by the provided worker.
  # * <tt>:recurring_task_id</tt> - To only include the jobs corresponding to runs of a recurring task.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#54
  def where(job_class_name: T.unsafe(nil), queue_name: T.unsafe(nil), worker_id: T.unsafe(nil), recurring_task_id: T.unsafe(nil)); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#65
  def with_status(status); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#29
  def worker_id; end

  private

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#222
  def clone_with(**properties); end

  # @raise [ActiveJob::Errors::InvalidOperation]
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#275
  def ensure_failed_status; end

  # Filtering for not natively supported filters is performed in memory
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#263
  def filter(jobs); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#271
  def filters; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#283
  def in_ascending_batches(of:); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#295
  def in_descending_batches(of:); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#215
  def job_class_name=(_arg0); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#215
  def limit_value=(_arg0); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#234
  def load_jobs; end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#258
  def loaded?; end

  # Returns the value of attribute loaded_jobs.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#214
  def loaded_jobs; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#215
  def offset_value=(_arg0); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#242
  def perform_each; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#230
  def query_count; end

  # Returns the value of attribute queue_adapter.
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#214
  def queue_adapter; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#215
  def queue_name=(_arg0); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#215
  def recurring_task_id=(_arg0); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#267
  def satisfy_filter?(job); end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#217
  def set_defaults; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#215
  def status=(_arg0); end

  # @raise [ActiveJob::Errors::InvalidOperation]
  #
  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#279
  def validate_looping_in_batches_is_possible; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#308
  def wait_batch_delay; end

  # source://mission_control-jobs//lib/active_job/jobs_relation.rb#215
  def worker_id=(_arg0); end
end

# When no limit value it defaults to "all jobs"
#
# source://mission_control-jobs//lib/active_job/jobs_relation.rb#34
ActiveJob::JobsRelation::ALL_JOBS_LIMIT = T.let(T.unsafe(nil), Integer)

# source://mission_control-jobs//lib/active_job/jobs_relation.rb#26
ActiveJob::JobsRelation::FILTERS = T.let(T.unsafe(nil), Array)

# source://mission_control-jobs//lib/active_job/jobs_relation.rb#28
ActiveJob::JobsRelation::PROPERTIES = T.let(T.unsafe(nil), Array)

# source://mission_control-jobs//lib/active_job/jobs_relation.rb#25
ActiveJob::JobsRelation::STATUSES = T.let(T.unsafe(nil), Array)

# source://mission_control-jobs//lib/active_job/querying.rb#1
module ActiveJob::Querying
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::Querying::ClassMethods

  # source://mission_control-jobs//lib/active_job/querying.rb#30
  def queue; end

  module GeneratedClassMethods
    def default_page_size; end
    def default_page_size=(value); end
    def default_page_size?; end
  end

  module GeneratedInstanceMethods
    def default_page_size; end
    def default_page_size=(value); end
    def default_page_size?; end
  end
end

# source://mission_control-jobs//lib/active_job/querying.rb#0
module ActiveJob::Querying::ClassMethods
  # source://mission_control-jobs//lib/active_job/querying.rb#18
  def jobs; end

  # source://mission_control-jobs//lib/active_job/querying.rb#14
  def queues; end

  private

  # source://mission_control-jobs//lib/active_job/querying.rb#23
  def fetch_queues; end
end

# Top-level query methods added to `ActiveJob`
#
# source://mission_control-jobs//lib/active_job/querying.rb#35
module ActiveJob::Querying::Root
  # source://mission_control-jobs//lib/active_job/querying.rb#40
  def jobs; end

  # source://mission_control-jobs//lib/active_job/querying.rb#36
  def queues; end
end

# A queue of jobs
#
# source://mission_control-jobs//lib/active_job/queue.rb#2
class ActiveJob::Queue
  # @return [Queue] a new instance of Queue
  #
  # source://mission_control-jobs//lib/active_job/queue.rb#5
  def initialize(name, size: T.unsafe(nil), active: T.unsafe(nil), queue_adapter: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/queue.rb#39
  def active?; end

  # source://mission_control-jobs//lib/active_job/queue.rb#19
  def clear; end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/queue.rb#23
  def empty?; end

  # source://mission_control-jobs//lib/active_job/queue.rb#54
  def id; end

  # Return an +ActiveJob::JobsRelation+ with the pending jobs in the queue.
  #
  # source://mission_control-jobs//lib/active_job/queue.rb#45
  def jobs; end

  # source://mission_control-jobs//lib/active_job/queue.rb#13
  def length; end

  # Returns the value of attribute name.
  #
  # source://mission_control-jobs//lib/active_job/queue.rb#3
  def name; end

  # source://mission_control-jobs//lib/active_job/queue.rb#27
  def pause; end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/queue.rb#35
  def paused?; end

  # source://mission_control-jobs//lib/active_job/queue.rb#49
  def reload; end

  # source://mission_control-jobs//lib/active_job/queue.rb#31
  def resume; end

  # source://mission_control-jobs//lib/active_job/queue.rb#13
  def size; end

  # source://mission_control-jobs//lib/active_job/queue.rb#54
  def to_param; end

  private

  # Returns the value of attribute queue_adapter.
  #
  # source://mission_control-jobs//lib/active_job/queue.rb#61
  def queue_adapter; end
end

# source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#1
module ActiveJob::QueueAdapters::ResqueExt
  include ::MissionControl::Jobs::Adapter

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#4
  def initialize(redis = T.unsafe(nil)); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#9
  def activating(&block); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#34
  def clear_queue(queue_name); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#72
  def discard_all_jobs(jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#76
  def discard_job(job, jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#60
  def fetch_jobs(jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#80
  def find_job(job_id, jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#56
  def jobs_count(jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#38
  def pause_queue(queue_name); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#46
  def queue_paused?(queue_name); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#30
  def queue_size(queue_name); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#13
  def queues; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#42
  def resume_queue(queue_name); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#64
  def retry_all_jobs(jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#68
  def retry_job(job, jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#50
  def supported_job_filters(jobs_relation); end

  private

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#87
  def queue_names; end

  # Returns the value of attribute redis.
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#85
  def redis; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#91
  def resque_jobs_for(jobs_relation); end
end

# source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#95
class ActiveJob::QueueAdapters::ResqueExt::ResqueJobs
  # @return [ResqueJobs] a new instance of ResqueJobs
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#100
  def initialize(jobs_relation, redis:); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#113
  def all; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#105
  def count; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#98
  def default_page_size(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#138
  def discard(job); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#130
  def discard_all; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#147
  def find_job(job_id); end

  # Returns the value of attribute jobs_relation.
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#96
  def jobs_relation; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#98
  def limit_value_provided?(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#98
  def paginated?(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#117
  def retry_all; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#125
  def retry_job(job); end

  private

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#229
  def clear_failed_queue; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#221
  def count_fetched_jobs; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#183
  def deserialize_resque_job(resque_job_hash, index); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#203
  def direct_jobs_count; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#284
  def discard_all_in_batches; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#270
  def discard_all_one_by_one; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#278
  def discard_jobs(jobs); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#194
  def execution_error_from_resque_job(resque_job_hash); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#217
  def failed_jobs_count; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#172
  def fetch_failed_resque_jobs; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#176
  def fetch_queue_resque_jobs; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#164
  def fetch_resque_jobs; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#292
  def handle_resque_job_error(job, error); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#239
  def in_transactional_jobs_batches(jobs); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#288
  def jobs_by_id; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#207
  def pending_jobs_count; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#225
  def queue_redis_key; end

  # Returns the value of attribute redis.
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#152
  def redis; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#260
  def requeue(job); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#255
  def resque_requeue_and_discard(job); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#251
  def retry_all_in_batches; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#233
  def retry_jobs(jobs); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#160
  def targeting_all_jobs?; end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#247
  def use_batches?; end
end

# Redis transactions severely speed up operations, specially when the network latency is high.
# We limit the transaction size because large batches can result in redis timeout errors.
#
# source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#158
ActiveJob::QueueAdapters::ResqueExt::ResqueJobs::MAX_REDIS_TRANSACTION_SIZE = T.let(T.unsafe(nil), Integer)

# See +Resque::Datastore#remove_from_failed_queue+
#
# source://mission_control-jobs//lib/active_job/queue_adapters/resque_ext.rb#154
ActiveJob::QueueAdapters::ResqueExt::ResqueJobs::SENTINEL = T.let(T.unsafe(nil), String)

# source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#1
module ActiveJob::QueueAdapters::SolidQueueExt
  include ::MissionControl::Jobs::Adapter
  include ::ActiveJob::QueueAdapters::SolidQueueExt::Workers
  include ::ActiveJob::QueueAdapters::SolidQueueExt::RecurringTasks

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#22
  def clear_queue(queue_name); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#64
  def discard_all_jobs(jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#68
  def discard_job(job, jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#72
  def dispatch_job(job, jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#50
  def fetch_jobs(jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#76
  def find_job(job_id, *_arg1); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#46
  def jobs_count(jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#26
  def pause_queue(queue_name); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#34
  def queue_paused?(queue_name); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#18
  def queue_size(queue_name); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#5
  def queues; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#30
  def resume_queue(queue_name); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#56
  def retry_all_jobs(jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#60
  def retry_job(job, jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#42
  def supported_job_filters(*_arg0); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#38
  def supported_job_statuses; end

  private

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#95
  def deserialize_and_proxy_solid_queue_job(solid_queue_job, job_status = T.unsafe(nil)); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#125
  def dispatch_immediately(job); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#116
  def execution_error_from_solid_queue_job(solid_queue_job); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#83
  def find_queue_by_name(queue_name); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#91
  def find_solid_queue_job(job_id, jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#87
  def find_solid_queue_job!(job_id, jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#112
  def status_from_solid_queue_job(solid_queue_job); end
end

# source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/recurring_tasks.rb#1
module ActiveJob::QueueAdapters::SolidQueueExt::RecurringTasks
  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/recurring_tasks.rb#17
  def find_recurring_task(task_id); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/recurring_tasks.rb#6
  def recurring_tasks; end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/recurring_tasks.rb#2
  def supports_recurring_tasks?; end

  private

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/recurring_tasks.rb#32
  def recurring_task_attributes_from_solid_queue_task_attributes(task_attributes); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/recurring_tasks.rb#40
  def recurring_task_last_enqueued_at(task_keys); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/recurring_tasks.rb#26
  def recurring_tasks_from_dispatchers; end
end

# source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#132
class ActiveJob::QueueAdapters::SolidQueueExt::SolidQueueJobs
  # @return [SolidQueueJobs] a new instance of SolidQueueJobs
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#142
  def initialize(jobs_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#150
  def count; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#171
  def default_page_size(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#160
  def discard_all; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#154
  def find_job(active_job_id); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#171
  def job_class_name(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#146
  def jobs; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#171
  def limit_value(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#171
  def limit_value_provided?(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#171
  def offset_value(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#171
  def queue_name(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#171
  def recurring_task_id(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#164
  def retry_all; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#171
  def worker_id(*_arg0, **_arg1, &_arg2); end

  private

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#210
  def direct_count; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#220
  def execution_class_by_status; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#174
  def executions; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#248
  def filter_executions_by_class(executions); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#252
  def filter_executions_by_process_id(executions); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#234
  def filter_executions_by_queue(executions); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#262
  def filter_executions_by_task_key(executions); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#266
  def filter_jobs_by_class(jobs); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#244
  def filter_jobs_by_queue(jobs); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#185
  def finished_jobs; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#230
  def include_execution_association(executions); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#214
  def internally_limited_count; end

  # Returns the value of attribute jobs_relation.
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#169
  def jobs_relation; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#270
  def limit(executions_or_jobs); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#282
  def matches_queue_name?(job); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#206
  def matches_relation_filters?(job); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#278
  def matches_status?(job); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#274
  def offset(executions_or_jobs); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#197
  def order_executions(executions); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#193
  def order_finished_jobs(jobs); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#286
  def solid_queue_status; end
end

# source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext.rb#133
ActiveJob::QueueAdapters::SolidQueueExt::SolidQueueJobs::STATUS_MAP = T.let(T.unsafe(nil), Hash)

# source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/workers.rb#1
module ActiveJob::QueueAdapters::SolidQueueExt::Workers
  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/workers.rb#12
  def count_workers(workers_relation); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/workers.rb#2
  def exposes_workers?; end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/workers.rb#6
  def fetch_workers(workers_relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/workers.rb#16
  def find_worker(worker_id); end

  private

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/workers.rb#23
  def solid_queue_processes_from_workers_relation(relation); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/workers.rb#31
  def worker_attributes_from_solid_queue_process(process); end

  # source://mission_control-jobs//lib/active_job/queue_adapters/solid_queue_ext/workers.rb#27
  def worker_from_solid_queue_process(process); end
end

# An enumerable collection of queues that supports direct access to queues by name.
#
#   queue_1 = ApplicationJob::Queue.new("queue_1")
#   queue_2 = ApplicationJob::Queue.new("queue_2")
#   queues = ApplicationJob::Queues.new([queue_1, queue_2])
#
#   queues[:queue_1] #=> queue_1
#   queues[:queue_2] #=> queue_2
#   queues.to_a #=> [ queue_1, queue_2 ] # Enumerable
#
# See +ActiveJob::Queue+.
#
# source://mission_control-jobs//lib/active_job/queues.rb#12
class ActiveJob::Queues
  include ::Enumerable

  # @return [Queues] a new instance of Queues
  #
  # source://mission_control-jobs//lib/active_job/queues.rb#19
  def initialize(queues); end

  # source://mission_control-jobs//lib/active_job/queues.rb#17
  def [](*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queues.rb#15
  def each(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queues.rb#17
  def inspect(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queues.rb#17
  def length(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queues.rb#17
  def size(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/active_job/queues.rb#23
  def to_h; end

  # source://mission_control-jobs//lib/active_job/queues.rb#17
  def to_s(*_arg0, **_arg1, &_arg2); end

  private

  # Returns the value of attribute queues_by_name.
  #
  # source://mission_control-jobs//lib/active_job/queues.rb#28
  def queues_by_name; end

  # source://mission_control-jobs//lib/active_job/queues.rb#16
  def values(*_arg0, **_arg1, &_arg2); end
end

# source://mission_control-jobs//lib/mission_control/jobs/version.rb#1
module MissionControl; end

# source://mission_control-jobs//lib/mission_control/jobs/version.rb#2
module MissionControl::Jobs
  # source://mission_control-jobs//lib/mission_control/jobs.rb#14
  def adapters; end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#14
  def adapters=(val); end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#15
  def applications; end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#15
  def applications=(val); end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#16
  def base_controller_class; end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#16
  def base_controller_class=(val); end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#17
  def delay_between_bulk_operation_batches; end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#17
  def delay_between_bulk_operation_batches=(val); end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#19
  def internal_query_count_limit; end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#19
  def internal_query_count_limit=(val); end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#18
  def logger; end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#18
  def logger=(val); end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#21
  def scheduled_job_delay_threshold; end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#21
  def scheduled_job_delay_threshold=(val); end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#20
  def show_console_help; end

  # source://mission_control-jobs//lib/mission_control/jobs.rb#20
  def show_console_help=(val); end

  class << self
    # source://mission_control-jobs//lib/mission_control/jobs.rb#14
    def adapters; end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#14
    def adapters=(val); end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#15
    def applications; end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#15
    def applications=(val); end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#16
    def base_controller_class; end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#16
    def base_controller_class=(val); end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#17
    def delay_between_bulk_operation_batches; end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#17
    def delay_between_bulk_operation_batches=(val); end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#19
    def internal_query_count_limit; end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#19
    def internal_query_count_limit=(val); end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#18
    def logger; end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#18
    def logger=(val); end

    # source://railties/7.1.3.4/lib/rails/engine.rb#412
    def railtie_helpers_paths; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#395
    def railtie_namespace; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#416
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#21
    def scheduled_job_delay_threshold; end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#21
    def scheduled_job_delay_threshold=(val); end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#20
    def show_console_help; end

    # source://mission_control-jobs//lib/mission_control/jobs.rb#20
    def show_console_help=(val); end

    # source://railties/7.1.3.4/lib/rails/engine.rb#401
    def table_name_prefix; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#408
    def use_relative_model_naming?; end
  end
end

# source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#1
module MissionControl::Jobs::Adapter
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#2
  def activating(&block); end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#98
  def clear_queue(queue_name); end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#136
  def discard_all_jobs(jobs_relation); end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#140
  def discard_job(job, jobs_relation); end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#144
  def dispatch_job(job, jobs_relation); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#28
  def exposes_workers?; end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#124
  def fetch_jobs(jobs_relation); end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#148
  def find_job(job_id, *_arg1); end

  # Returns a recurring task represented by a hash as indicated above
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#52
  def find_recurring_task(recurring_task_id); end

  # Returns a worker represented by a hash as indicated above
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#76
  def find_worker(worker_id); end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#120
  def jobs_count(jobs_relation); end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#102
  def pause_queue(queue_name); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#114
  def queue_paused?(queue_name); end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#94
  def queue_size(queue_name); end

  # Returns an array with the list of queues. Each queue is represented as a hash
  # with these attributes:
  #   {
  #     name: "queue_name",
  #     size: 1,
  #     active: true
  #   }
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#90
  def queues; end

  # Returns an array with the list of recurring tasks. Each task is represented as a hash
  # with these attributes:
  #   {
  #     id: "periodic-job",
  #     job_class_name: "MyJob",
  #     arguments: [ 123, { arg: :value }]
  #     schedule: "every monday at 9 am",
  #     last_enqueued_at: Fri, 26 Jan 2024 20:31:09.652174000 UTC +00:00,
  #   }
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#45
  def recurring_tasks; end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#108
  def resume_queue(queue_name); end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#128
  def retry_all_jobs(jobs_relation); end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#132
  def retry_job(job, jobs_relation); end

  # List of filters supported natively. Non-supported filters are done in memory.
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#20
  def supported_job_filters(jobs_relation); end

  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#10
  def supported_job_statuses; end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#15
  def supports_job_filter?(jobs_relation, filter); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#6
  def supports_job_status?(status); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#24
  def supports_queue_pausing?; end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#32
  def supports_recurring_tasks?; end

  # Returns an array with the list of workers. Each worker is represented as a hash
  # with these attributes:
  #   {
  #     id: 123,
  #     name: "worker-name",
  #     hostname: "hey-default-101",
  #     last_heartbeat_at: Fri, 26 Jan 2024 20:31:09.652174000 UTC +00:00,
  #     configuration: { ... }
  #     raw_data: { ... }
  #   }
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#69
  def workers; end

  private

  # @raise [MissionControl::Jobs::Errors::IncompatibleAdapter]
  #
  # source://mission_control-jobs//lib/mission_control/jobs/adapter.rb#153
  def raise_incompatible_adapter_error_from(method_name); end
end

module MissionControl::Jobs::AdapterFeatures
  extend ::ActiveSupport::Concern

  private

  def queue_pausing_supported?; end
  def recurring_tasks_supported?; end
  def supported_job_statuses; end
  def workers_exposed?; end
end

# An application containing backend jobs servers
#
# source://mission_control-jobs//lib/mission_control/jobs/application.rb#2
class MissionControl::Jobs::Application
  include ::MissionControl::Jobs::IdentifiedByName

  # @return [Application] a new instance of Application
  #
  # source://mission_control-jobs//lib/mission_control/jobs/application.rb#7
  def initialize(name:); end

  # source://mission_control-jobs//lib/mission_control/jobs/application.rb#12
  def add_servers(queue_adapters_by_name); end

  # source://mission_control-jobs//lib/mission_control/jobs/identified_by_name.rb#5
  def name; end

  # Returns the value of attribute servers.
  #
  # source://mission_control-jobs//lib/mission_control/jobs/application.rb#5
  def servers; end

  # source://mission_control-jobs//lib/mission_control/jobs/identified_by_name.rb#5
  def to_s; end
end

module MissionControl::Jobs::ApplicationHelper
  include ::MissionControl::Jobs::UiHelper
  include ::MissionControl::Jobs::NavigationHelper
  include ::MissionControl::Jobs::JobsHelper
  include ::MissionControl::Jobs::DatesHelper
end

class MissionControl::Jobs::ApplicationRecord < ::ActiveRecord::Base
  include ::MissionControl::Jobs::ApplicationRecord::GeneratedAttributeMethods
  include ::MissionControl::Jobs::ApplicationRecord::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.1.3.4/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.1.3.4/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

module MissionControl::Jobs::ApplicationRecord::GeneratedAssociationMethods; end
module MissionControl::Jobs::ApplicationRecord::GeneratedAttributeMethods; end

module MissionControl::Jobs::ApplicationScoped
  extend ::ActiveSupport::Concern

  private

  def activating_job_server(&block); end
  def find_application; end
  def find_server; end
  def set_application; end
end

# A container to register applications
#
# source://mission_control-jobs//lib/mission_control/jobs/applications.rb#2
class MissionControl::Jobs::Applications < ::MissionControl::Jobs::IdentifiedElements
  # source://mission_control-jobs//lib/mission_control/jobs/applications.rb#3
  def add(name, queue_adapters_by_name = T.unsafe(nil)); end
end

module MissionControl::Jobs::Console; end

# source://mission_control-jobs//lib/mission_control/jobs/console/context.rb#1
module MissionControl::Jobs::Console::Context
  # source://mission_control-jobs//lib/mission_control/jobs/console/context.rb#4
  def evaluate(*_arg0); end

  # source://mission_control-jobs//lib/mission_control/jobs/console/context.rb#2
  def jobs_server; end

  # source://mission_control-jobs//lib/mission_control/jobs/console/context.rb#2
  def jobs_server=(val); end

  class << self
    # source://mission_control-jobs//lib/mission_control/jobs/console/context.rb#2
    def jobs_server; end

    # source://mission_control-jobs//lib/mission_control/jobs/console/context.rb#2
    def jobs_server=(val); end
  end
end

# source://mission_control-jobs//lib/mission_control/jobs/console/helpers.rb#1
module MissionControl::Jobs::Console::Helpers
  # source://mission_control-jobs//lib/mission_control/jobs/console/helpers.rb#2
  def connect_to(server_locator); end

  # source://mission_control-jobs//lib/mission_control/jobs/console/helpers.rb#10
  def jobs_help; end
end

class MissionControl::Jobs::Current < ::ActiveSupport::CurrentAttributes
  class << self
    # source://activesupport/7.1.3.4/lib/active_support/current_attributes.rb#127
    def application; end

    # source://activesupport/7.1.3.4/lib/active_support/current_attributes.rb#127
    def application=(value); end

    # source://activesupport/7.1.3.4/lib/active_support/current_attributes.rb#127
    def server; end

    # source://activesupport/7.1.3.4/lib/active_support/current_attributes.rb#127
    def server=(value); end
  end
end

module MissionControl::Jobs::DatesHelper
  def bidirectional_time_distance_in_words_with_title(time); end
  def time_ago_in_words_with_title(time); end
  def time_distance_in_words_with_title(time); end
end

# source://mission_control-jobs//lib/mission_control/jobs/engine.rb#10
class MissionControl::Jobs::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://mission_control-jobs//lib/mission_control/jobs/errors/incompatible_adapter.rb#1
class MissionControl::Jobs::Errors::IncompatibleAdapter < ::StandardError; end

# source://mission_control-jobs//lib/mission_control/jobs/errors/resource_not_found.rb#1
class MissionControl::Jobs::Errors::ResourceNotFound < ::StandardError; end

module MissionControl::Jobs::FailedJobsBulkOperations
  extend ::ActiveSupport::Concern
  include ::MissionControl::Jobs::JobFilters

  private

  def bulk_limited_filtered_failed_jobs; end
end

MissionControl::Jobs::FailedJobsBulkOperations::MAX_NUMBER_OF_JOBS_FOR_BULK_OPERATIONS = T.let(T.unsafe(nil), Integer)

# source://mission_control-jobs//lib/mission_control/jobs/identified_by_name.rb#1
module MissionControl::Jobs::IdentifiedByName
  extend ::ActiveSupport::Concern

  # source://mission_control-jobs//lib/mission_control/jobs/identified_by_name.rb#9
  def initialize(name:); end

  # source://mission_control-jobs//lib/mission_control/jobs/identified_by_name.rb#13
  def id; end

  # source://mission_control-jobs//lib/mission_control/jobs/identified_by_name.rb#13
  def to_param; end
end

# A collection of elements offering a Hash-like access based on
# their +id+.
#
# source://mission_control-jobs//lib/mission_control/jobs/identified_elements.rb#3
class MissionControl::Jobs::IdentifiedElements
  include ::Enumerable

  # @return [IdentifiedElements] a new instance of IdentifiedElements
  #
  # source://mission_control-jobs//lib/mission_control/jobs/identified_elements.rb#9
  def initialize; end

  # source://mission_control-jobs//lib/mission_control/jobs/identified_elements.rb#13
  def <<(item); end

  # source://mission_control-jobs//lib/mission_control/jobs/identified_elements.rb#6
  def [](*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/mission_control/jobs/identified_elements.rb#7
  def each(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/mission_control/jobs/identified_elements.rb#6
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/mission_control/jobs/identified_elements.rb#7
  def last(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/mission_control/jobs/identified_elements.rb#7
  def length(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/mission_control/jobs/identified_elements.rb#17
  def to_a; end

  private

  # Returns the value of attribute elements.
  #
  # source://mission_control-jobs//lib/mission_control/jobs/identified_elements.rb#22
  def elements; end
end

module MissionControl::Jobs::JobFilters
  extend ::ActiveSupport::Concern

  private

  def active_filters?; end
  def set_filters; end
end

module MissionControl::Jobs::JobScoped
  extend ::ActiveSupport::Concern

  private

  def jobs_relation; end
  def set_job; end
end

module MissionControl::Jobs::JobsHelper
  def attribute_names_for_job_status(status); end
  def failed_job_backtrace(job); end
  def failed_job_error(job); end
  def job_arguments(job); end
  def job_delayed?(job); end
  def job_title(job); end

  private

  def as_renderable_argument(argument); end
  def as_renderable_array(argument); end
  def as_renderable_hash(argument); end
  def renderable_job_arguments_for(job); end
end

module MissionControl::Jobs::NavigationHelper
  def current_section; end
  def jobs_count_with_status(status); end
  def jobs_filter_param; end
  def navigation(title: T.unsafe(nil), section: T.unsafe(nil)); end
  def navigation_section_for_status(status); end
  def navigation_sections; end
  def page_title; end
  def selectable_applications; end
  def selected_application?(application); end
  def selected_server?(server); end
end

module MissionControl::Jobs::NotFoundRedirections
  extend ::ActiveSupport::Concern

  private

  def best_location_for_job_relation(job_relation); end
  def best_location_for_resource_not_found_error(error); end
end

class MissionControl::Jobs::Page
  def initialize(relation, page: T.unsafe(nil), page_size: T.unsafe(nil)); end

  def empty?; end
  def first?; end
  def index; end
  def last?; end
  def next_index; end
  def page_size; end
  def pages_count; end
  def previous_index; end
  def records; end
  def total_count; end

  private

  def offset; end
end

MissionControl::Jobs::Page::DEFAULT_PAGE_SIZE = T.let(T.unsafe(nil), Integer)

module MissionControl::Jobs::QueueScoped
  extend ::ActiveSupport::Concern

  private

  def set_queue; end
end

class MissionControl::Jobs::RecurringTask
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::API
  include ::NameOfPerson::HasPersonName
  include ::ActiveModel::Access
  include ::ActiveModel::Model
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::NameOfPerson::HasPersonName::ClassMethods

  def initialize(queue_adapter: T.unsafe(nil), **kwargs); end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#951
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#963
  def _validate_callbacks; end

  # source://activemodel/7.1.3.4/lib/active_model/validations.rb#71
  def _validators; end

  # source://activemodel/7.1.3.4/lib/active_model/validations.rb#71
  def _validators?; end

  def arguments; end
  def arguments=(_arg0); end
  def id; end
  def id=(_arg0); end
  def job_class_name; end
  def job_class_name=(_arg0); end
  def jobs; end
  def last_enqueued_at; end
  def last_enqueued_at=(_arg0); end

  # source://activemodel/7.1.3.4/lib/active_model/naming.rb#255
  def model_name(&block); end

  # source://activemodel/7.1.3.4/lib/active_model/conversion.rb#32
  def param_delimiter=(_arg0); end

  def schedule; end
  def schedule=(_arg0); end

  # source://activemodel/7.1.3.4/lib/active_model/validations.rb#67
  def validation_context; end

  private

  def queue_adapter; end

  # source://activemodel/7.1.3.4/lib/active_model/validations.rb#67
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#955
    def _validate_callbacks; end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#959
    def _validate_callbacks=(value); end

    # source://activemodel/7.1.3.4/lib/active_model/validations.rb#71
    def _validators; end

    # source://activemodel/7.1.3.4/lib/active_model/validations.rb#71
    def _validators=(value); end

    # source://activemodel/7.1.3.4/lib/active_model/validations.rb#71
    def _validators?; end

    # source://activemodel/7.1.3.4/lib/active_model/conversion.rb#32
    def param_delimiter; end

    # source://activemodel/7.1.3.4/lib/active_model/conversion.rb#32
    def param_delimiter=(value); end

    # source://activemodel/7.1.3.4/lib/active_model/conversion.rb#32
    def param_delimiter?; end
  end
end

# source://mission_control-jobs//lib/mission_control/jobs/server.rb#3
class MissionControl::Jobs::Server
  include ::MissionControl::Jobs::IdentifiedByName
  include ::MissionControl::Jobs::Server::Workers
  include ::MissionControl::Jobs::Server::RecurringTasks
  include ::MissionControl::Jobs::Server::Serializable
  extend ::MissionControl::Jobs::Server::Serializable::ClassMethods

  # @return [Server] a new instance of Server
  #
  # source://mission_control-jobs//lib/mission_control/jobs/server.rb#9
  def initialize(name:, queue_adapter:, application:); end

  # source://mission_control-jobs//lib/mission_control/jobs/server.rb#15
  def activating(&block); end

  # Returns the value of attribute application.
  #
  # source://mission_control-jobs//lib/mission_control/jobs/server.rb#7
  def application; end

  # Returns the value of attribute name.
  #
  # source://mission_control-jobs//lib/mission_control/jobs/server.rb#7
  def name; end

  # Returns the value of attribute queue_adapter.
  #
  # source://mission_control-jobs//lib/mission_control/jobs/server.rb#7
  def queue_adapter; end

  # source://mission_control-jobs//lib/mission_control/jobs/server.rb#23
  def queue_adapter_name; end

  # source://mission_control-jobs//lib/mission_control/jobs/identified_by_name.rb#5
  def to_s; end
end

# source://mission_control-jobs//lib/mission_control/jobs/server/recurring_tasks.rb#1
module MissionControl::Jobs::Server::RecurringTasks
  # source://mission_control-jobs//lib/mission_control/jobs/server/recurring_tasks.rb#8
  def find_recurring_task(task_id); end

  # source://mission_control-jobs//lib/mission_control/jobs/server/recurring_tasks.rb#2
  def recurring_tasks; end
end

# source://mission_control-jobs//lib/mission_control/jobs/server/serializable.rb#1
module MissionControl::Jobs::Server::Serializable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::MissionControl::Jobs::Server::Serializable::ClassMethods

  # source://mission_control-jobs//lib/mission_control/jobs/server/serializable.rb#20
  def to_global_id; end
end

# source://mission_control-jobs//lib/mission_control/jobs/server/serializable.rb#0
module MissionControl::Jobs::Server::Serializable::ClassMethods
  # source://mission_control-jobs//lib/mission_control/jobs/server/serializable.rb#10
  def from_global_id(global_id); end
end

# source://mission_control-jobs//lib/mission_control/jobs/server/workers.rb#1
module MissionControl::Jobs::Server::Workers
  # source://mission_control-jobs//lib/mission_control/jobs/server/workers.rb#6
  def find_worker(worker_id); end

  # source://mission_control-jobs//lib/mission_control/jobs/server/workers.rb#2
  def workers_relation; end
end

module MissionControl::Jobs::UiHelper
  def blank_status_emoji(status); end
  def blank_status_notice(message); end
  def modifier_for_status(status); end
end

# source://mission_control-jobs//lib/mission_control/jobs/version.rb#3
MissionControl::Jobs::VERSION = T.let(T.unsafe(nil), String)

class MissionControl::Jobs::Worker
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::API
  include ::NameOfPerson::HasPersonName
  include ::ActiveModel::Access
  include ::ActiveModel::Model
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::NameOfPerson::HasPersonName::ClassMethods

  def initialize(queue_adapter: T.unsafe(nil), **kwargs); end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#951
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#963
  def _validate_callbacks; end

  # source://activemodel/7.1.3.4/lib/active_model/validations.rb#71
  def _validators; end

  # source://activemodel/7.1.3.4/lib/active_model/validations.rb#71
  def _validators?; end

  def configuration; end
  def configuration=(_arg0); end
  def hostname; end
  def hostname=(_arg0); end
  def id; end
  def id=(_arg0); end
  def jobs; end
  def last_heartbeat_at; end
  def last_heartbeat_at=(_arg0); end

  # source://activemodel/7.1.3.4/lib/active_model/naming.rb#255
  def model_name(&block); end

  def name; end
  def name=(_arg0); end

  # source://activemodel/7.1.3.4/lib/active_model/conversion.rb#32
  def param_delimiter=(_arg0); end

  def raw_data; end
  def raw_data=(_arg0); end

  # source://activemodel/7.1.3.4/lib/active_model/validations.rb#67
  def validation_context; end

  private

  def queue_adapter; end

  # source://activemodel/7.1.3.4/lib/active_model/validations.rb#67
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#955
    def _validate_callbacks; end

    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#959
    def _validate_callbacks=(value); end

    # source://activemodel/7.1.3.4/lib/active_model/validations.rb#71
    def _validators; end

    # source://activemodel/7.1.3.4/lib/active_model/validations.rb#71
    def _validators=(value); end

    # source://activemodel/7.1.3.4/lib/active_model/validations.rb#71
    def _validators?; end

    # source://activemodel/7.1.3.4/lib/active_model/conversion.rb#32
    def param_delimiter; end

    # source://activemodel/7.1.3.4/lib/active_model/conversion.rb#32
    def param_delimiter=(value); end

    # source://activemodel/7.1.3.4/lib/active_model/conversion.rb#32
    def param_delimiter?; end
  end
end

# A relation of workers.
#
# Relations are enumerable, so you can use +Enumerable+ methods on them.
# Notice however that using these methods will imply loading all the relation
# in memory, which could introduce performance concerns.
#
# source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#6
class MissionControl::Jobs::WorkersRelation
  include ::Enumerable

  # @return [WorkersRelation] a new instance of WorkersRelation
  #
  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#15
  def initialize(queue_adapter:); end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#11
  def [](*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#38
  def count; end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#29
  def each(&block); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#46
  def empty?; end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#11
  def last(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#38
  def length; end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#25
  def limit(limit); end

  # Returns the value of attribute limit_value.
  #
  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#9
  def limit_value; end

  # Sets the attribute limit_value
  #
  # @param value the value to set the attribute limit_value to.
  #
  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#9
  def limit_value=(_arg0); end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#21
  def offset(offset); end

  # Returns the value of attribute offset_value.
  #
  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#9
  def offset_value; end

  # Sets the attribute offset_value
  #
  # @param value the value to set the attribute offset_value to.
  #
  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#9
  def offset_value=(_arg0); end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#33
  def reload; end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#11
  def reverse(*_arg0, **_arg1, &_arg2); end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#38
  def size; end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#11
  def to_s(*_arg0, **_arg1, &_arg2); end

  private

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#71
  def clone_with(**properties); end

  # @return [Boolean]
  #
  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#67
  def loaded?; end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#63
  def query_count; end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#54
  def set_defaults; end

  # source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#59
  def workers; end
end

# When no limit value it defaults to "all workers"
#
# source://mission_control-jobs//lib/mission_control/jobs/workers_relation.rb#13
MissionControl::Jobs::WorkersRelation::ALL_WORKERS_LIMIT = T.let(T.unsafe(nil), Integer)
