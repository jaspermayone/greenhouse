# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `isolator` gem.
# Please instead update this file by running `bin/tapioca gem isolator`.


# Isolator detects unsafe operations performed within DB transactions.
#
# source://isolator//lib/isolator/version.rb#3
module Isolator
  extend ::Isolator::Isolate
  extend ::Isolator::Callbacks

  class << self
    # source://isolator//lib/isolator.rb#196
    def adapters; end

    # source://isolator//lib/isolator.rb#97
    def all_transactions; end

    # Returns the value of attribute backtrace_cleaner.
    #
    # source://isolator//lib/isolator.rb#212
    def backtrace_cleaner; end

    # Sets the attribute backtrace_cleaner
    #
    # @param value the value to set the attribute backtrace_cleaner to.
    #
    # source://isolator//lib/isolator.rb#212
    def backtrace_cleaner=(_arg0); end

    # Returns the value of attribute backtrace_length.
    #
    # source://isolator//lib/isolator.rb#212
    def backtrace_length; end

    # Sets the attribute backtrace_length
    #
    # @param value the value to set the attribute backtrace_length to.
    #
    # source://isolator//lib/isolator.rb#212
    def backtrace_length=(_arg0); end

    # source://isolator//lib/isolator.rb#177
    def clear_transactions!; end

    # source://isolator//lib/isolator.rb#39
    def config; end

    # @yield [config]
    #
    # source://isolator//lib/isolator.rb#43
    def configure; end

    # source://isolator//lib/isolator.rb#101
    def connection_threshold(connection_id); end

    # source://isolator//lib/isolator.rb#93
    def current_transactions(connection_id = T.unsafe(nil)); end

    # Returns the value of attribute debug_enabled.
    #
    # source://isolator//lib/isolator.rb#212
    def debug_enabled; end

    # Sets the attribute debug_enabled
    #
    # @param value the value to set the attribute debug_enabled to.
    #
    # source://isolator//lib/isolator.rb#212
    def debug_enabled=(_arg0); end

    # source://isolator//lib/isolator.rb#121
    def decr_thresholds!; end

    # source://isolator//lib/isolator.rb#152
    def decr_transactions!(connection_id = T.unsafe(nil)); end

    # Returns the value of attribute default_connection_id.
    #
    # source://isolator//lib/isolator.rb#37
    def default_connection_id; end

    # Sets the attribute default_connection_id
    #
    # @param value the value to set the attribute default_connection_id to.
    #
    # source://isolator//lib/isolator.rb#37
    def default_connection_id=(_arg0); end

    # Returns the value of attribute default_threshold.
    #
    # source://isolator//lib/isolator.rb#37
    def default_threshold; end

    # Sets the attribute default_threshold
    #
    # @param value the value to set the attribute default_threshold to.
    #
    # source://isolator//lib/isolator.rb#37
    def default_threshold=(_arg0); end

    # Accepts block and disable Isolator within
    #
    # source://isolator//lib/isolator.rb#60
    def disable; end

    # source://isolator//lib/isolator.rb#55
    def disable!; end

    # @return [Boolean]
    #
    # source://isolator//lib/isolator.rb#192
    def disabled?; end

    # Accepts block and enable Isolator within
    #
    # source://isolator//lib/isolator.rb#73
    def enable; end

    # source://isolator//lib/isolator.rb#51
    def enable!; end

    # @return [Boolean]
    #
    # source://isolator//lib/isolator.rb#188
    def enabled?; end

    # @return [Boolean]
    #
    # source://isolator//lib/isolator.rb#200
    def has_adapter?(id); end

    # source://isolator//lib/isolator.rb#112
    def incr_thresholds!; end

    # source://isolator//lib/isolator.rb#130
    def incr_transactions!(connection_id = T.unsafe(nil)); end

    # source://isolator//lib/isolator.rb#204
    def load_ignore_config(path); end

    # source://isolator//lib/isolator.rb#47
    def notify(exception:, backtrace:); end

    # source://isolator//lib/isolator.rb#105
    def set_connection_threshold(val, connection_id = T.unsafe(nil)); end

    # source://isolator//lib/isolator.rb#89
    def transactions_threshold(connection_id = T.unsafe(nil)); end

    # source://isolator//lib/isolator.rb#85
    def transactions_threshold=(val); end

    # @return [Boolean]
    #
    # source://isolator//lib/isolator.rb#181
    def within_transaction?; end

    private

    # source://isolator//lib/isolator.rb#244
    def colorize_debug(msg); end

    # source://isolator//lib/isolator.rb#218
    def debug!(msg); end

    # source://isolator//lib/isolator.rb#239
    def extract_source_location(locations); end

    # Returns the value of attribute state.
    #
    # source://isolator//lib/isolator.rb#216
    def state; end

    # Sets the attribute state
    #
    # @param value the value to set the attribute state to.
    #
    # source://isolator//lib/isolator.rb#216
    def state=(_arg0); end
  end
end

# ActiveSupport notifications listener
# Used for ActiveRecord and ROM::SQL (when instrumentation is available)
#
# source://isolator//lib/isolator/orm_adapters/active_support_subscriber.rb#6
module Isolator::ActiveSupportSubscriber
  class << self
    # source://isolator//lib/isolator/orm_adapters/active_support_subscriber.rb#47
    def subscribe!(event); end
  end
end

# source://isolator//lib/isolator/orm_adapters/active_support_subscriber.rb#8
Isolator::ActiveSupportSubscriber::FINISH_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://isolator//lib/isolator/orm_adapters/active_support_subscriber.rb#7
Isolator::ActiveSupportSubscriber::START_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://isolator//lib/isolator/orm_adapters/active_support_subscriber.rb#10
class Isolator::ActiveSupportSubscriber::Subscriber
  # source://isolator//lib/isolator/orm_adapters/active_support_subscriber.rb#19
  def finish(event, id, payload); end

  # source://isolator//lib/isolator/orm_adapters/active_support_subscriber.rb#11
  def start(event, id, payload); end

  private

  # source://isolator//lib/isolator/orm_adapters/active_support_subscriber.rb#42
  def extract_connection_id(payload); end

  # @return [Boolean]
  #
  # source://isolator//lib/isolator/orm_adapters/active_support_subscriber.rb#33
  def finish_event?(sql); end

  # Prevents "ArgumentError: invalid byte sequence in UTF-8" by replacing invalid byte sequence with "?"
  #
  # source://isolator//lib/isolator/orm_adapters/active_support_subscriber.rb#38
  def sanitize_query(sql); end

  # @return [Boolean]
  #
  # source://isolator//lib/isolator/orm_adapters/active_support_subscriber.rb#29
  def start_event?(sql); end
end

# ActiveSupport notifications subscriber for "transaction.active_record" event (new in Rails 7.1)
#
# source://isolator//lib/isolator/orm_adapters/active_support_transaction_subscriber.rb#5
module Isolator::ActiveSupportTransactionSubscriber
  class << self
    # source://isolator//lib/isolator/orm_adapters/active_support_transaction_subscriber.rb#68
    def subscribe!(event = T.unsafe(nil), sql_event = T.unsafe(nil)); end
  end
end

# source://isolator//lib/isolator/orm_adapters/active_support_transaction_subscriber.rb#6
class Isolator::ActiveSupportTransactionSubscriber::Subscriber < ::Isolator::ActiveSupportSubscriber::Subscriber
  # @return [Subscriber] a new instance of Subscriber
  #
  # source://isolator//lib/isolator/orm_adapters/active_support_transaction_subscriber.rb#9
  def initialize; end

  # source://isolator//lib/isolator/orm_adapters/active_support_transaction_subscriber.rb#31
  def finish(event, id, payload); end

  # Returns the value of attribute stacks.
  #
  # source://isolator//lib/isolator/orm_adapters/active_support_transaction_subscriber.rb#7
  def stacks; end

  # source://isolator//lib/isolator/orm_adapters/active_support_transaction_subscriber.rb#13
  def start(event, id, payload); end

  private

  # source://isolator//lib/isolator/orm_adapters/active_support_transaction_subscriber.rb#63
  def extract_transaction_connection_id(payload); end
end

# Builds adapter from provided params
#
# source://isolator//lib/isolator/adapter_builder.rb#7
module Isolator::AdapterBuilder
  class << self
    # source://isolator//lib/isolator/adapter_builder.rb#9
    def call(target: T.unsafe(nil), method_name: T.unsafe(nil), **options); end

    private

    # source://isolator//lib/isolator/adapter_builder.rb#31
    def build_mod(method_name, adapter); end
  end
end

# source://isolator//lib/isolator/adapters/base.rb#4
module Isolator::Adapters; end

# Used as a "template" for adapters
#
# source://isolator//lib/isolator/adapters/base.rb#6
module Isolator::Adapters::Base
  # Returns the value of attribute details_message.
  #
  # source://isolator//lib/isolator/adapters/base.rb#7
  def details_message; end

  # Sets the attribute details_message
  #
  # @param value the value to set the attribute details_message to.
  #
  # source://isolator//lib/isolator/adapters/base.rb#7
  def details_message=(_arg0); end

  # source://isolator//lib/isolator/adapters/base.rb#9
  def disable!; end

  # @return [Boolean]
  #
  # source://isolator//lib/isolator/adapters/base.rb#21
  def disabled?; end

  # source://isolator//lib/isolator/adapters/base.rb#13
  def enable!; end

  # @return [Boolean]
  #
  # source://isolator//lib/isolator/adapters/base.rb#17
  def enabled?; end

  # Returns the value of attribute exception_class.
  #
  # source://isolator//lib/isolator/adapters/base.rb#7
  def exception_class; end

  # Sets the attribute exception_class
  #
  # @param value the value to set the attribute exception_class to.
  #
  # source://isolator//lib/isolator/adapters/base.rb#7
  def exception_class=(_arg0); end

  # Returns the value of attribute exception_message.
  #
  # source://isolator//lib/isolator/adapters/base.rb#7
  def exception_message; end

  # Sets the attribute exception_message
  #
  # @param value the value to set the attribute exception_message to.
  #
  # source://isolator//lib/isolator/adapters/base.rb#7
  def exception_message=(_arg0); end

  # source://isolator//lib/isolator/adapters/base.rb#34
  def ignore_if(&block); end

  # @return [Boolean]
  #
  # source://isolator//lib/isolator/adapters/base.rb#42
  def ignored?(*args, **kwargs); end

  # source://isolator//lib/isolator/adapters/base.rb#38
  def ignores; end

  # source://isolator//lib/isolator/adapters/base.rb#25
  def notify(backtrace, obj, *args, **kwargs); end

  # @return [Boolean]
  #
  # source://isolator//lib/isolator/adapters/base.rb#30
  def notify?(*_arg0, **_arg1, &_arg2); end

  private

  # source://isolator//lib/isolator/adapters/base.rb#54
  def build_details(obj, args, kwargs); end

  # source://isolator//lib/isolator/adapters/base.rb#48
  def build_exception(obj, args, kwargs = T.unsafe(nil)); end
end

# source://isolator//lib/isolator/errors.rb#17
class Isolator::BackgroundJobError < ::Isolator::UnsafeOperationError; end

# source://isolator//lib/isolator/errors.rb#18
Isolator::BackgroundJobError::MESSAGE = T.let(T.unsafe(nil), String)

# Add before_isolate and after_isolate callbacks
#
# source://isolator//lib/isolator/callbacks.rb#5
module Isolator::Callbacks
  # source://isolator//lib/isolator/callbacks.rb#10
  def after_isolate(&block); end

  # source://isolator//lib/isolator/callbacks.rb#44
  def after_isolate_callbacks; end

  # source://isolator//lib/isolator/callbacks.rb#6
  def before_isolate(&block); end

  # source://isolator//lib/isolator/callbacks.rb#40
  def before_isolate_callbacks; end

  # source://isolator//lib/isolator/callbacks.rb#27
  def finish!; end

  # source://isolator//lib/isolator/callbacks.rb#32
  def notify!(event, payload); end

  # source://isolator//lib/isolator/callbacks.rb#14
  def on_transaction_begin(&block); end

  # source://isolator//lib/isolator/callbacks.rb#18
  def on_transaction_end(&block); end

  # source://isolator//lib/isolator/callbacks.rb#22
  def start!; end

  # source://isolator//lib/isolator/callbacks.rb#48
  def transaction_begin_callbacks; end

  # source://isolator//lib/isolator/callbacks.rb#52
  def transaction_end_callbacks; end
end

# source://isolator//lib/isolator/plugins/concurrent_database_transactions.rb#10
class Isolator::ConcurrentTransactionError < ::Isolator::UnsafeOperationError; end

# source://isolator//lib/isolator/plugins/concurrent_database_transactions.rb#11
Isolator::ConcurrentTransactionError::MESSAGE = T.let(T.unsafe(nil), String)

# Isolator configuration:
#
# - `raise_exceptions` - whether to raise an exception in case of offense;
#   defaults to true in test env and false otherwise.
#   NOTE: env is inferred from RACK_ENV and RAILS_ENV.
#
# - `logger` - logger instance (nil by default)
#
# - `send_notifications` - whether to send notifications (through uniform_notifier);
#   defaults to false
#
# - `backtrace_filter` - define a custom backtrace filtering (provide a callable)
#
# - `ignorer` - define a custom ignorer (must implement .prepare)
#
# source://isolator//lib/isolator/configuration.rb#19
class Isolator::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://isolator//lib/isolator/configuration.rb#23
  def initialize; end

  # Returns the value of attribute backtrace_filter.
  #
  # source://isolator//lib/isolator/configuration.rb#20
  def backtrace_filter; end

  # Sets the attribute backtrace_filter
  #
  # @param value the value to set the attribute backtrace_filter to.
  #
  # source://isolator//lib/isolator/configuration.rb#20
  def backtrace_filter=(_arg0); end

  # Returns the value of attribute disallow_per_thread_concurrent_transactions.
  #
  # source://isolator//lib/isolator/plugins/concurrent_database_transactions.rb#5
  def disallow_per_thread_concurrent_transactions; end

  # Sets the attribute disallow_per_thread_concurrent_transactions
  #
  # @param value the value to set the attribute disallow_per_thread_concurrent_transactions to.
  #
  # source://isolator//lib/isolator/plugins/concurrent_database_transactions.rb#5
  def disallow_per_thread_concurrent_transactions=(_arg0); end

  # Returns the value of attribute disallow_per_thread_concurrent_transactions.
  #
  # source://isolator//lib/isolator/plugins/concurrent_database_transactions.rb#5
  def disallow_per_thread_concurrent_transactions?; end

  # Returns the value of attribute ignorer.
  #
  # source://isolator//lib/isolator/configuration.rb#20
  def ignorer; end

  # Sets the attribute ignorer
  #
  # @param value the value to set the attribute ignorer to.
  #
  # source://isolator//lib/isolator/configuration.rb#20
  def ignorer=(_arg0); end

  # Returns the value of attribute logger.
  #
  # source://isolator//lib/isolator/configuration.rb#20
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://isolator//lib/isolator/configuration.rb#20
  def logger=(_arg0); end

  # Returns the value of attribute raise_exceptions.
  #
  # source://isolator//lib/isolator/configuration.rb#20
  def raise_exceptions; end

  # Sets the attribute raise_exceptions
  #
  # @param value the value to set the attribute raise_exceptions to.
  #
  # source://isolator//lib/isolator/configuration.rb#20
  def raise_exceptions=(_arg0); end

  # Returns the value of attribute raise_exceptions.
  #
  # source://isolator//lib/isolator/configuration.rb#20
  def raise_exceptions?; end

  # Returns the value of attribute send_notifications.
  #
  # source://isolator//lib/isolator/configuration.rb#20
  def send_notifications; end

  # Sets the attribute send_notifications
  #
  # @param value the value to set the attribute send_notifications to.
  #
  # source://isolator//lib/isolator/configuration.rb#20
  def send_notifications=(_arg0); end

  # Returns the value of attribute send_notifications.
  #
  # source://isolator//lib/isolator/configuration.rb#20
  def send_notifications?; end

  # @return [Boolean]
  #
  # source://isolator//lib/isolator/configuration.rb#34
  def test_env?; end
end

# source://isolator//lib/isolator/errors.rb#13
class Isolator::HTTPError < ::Isolator::UnsafeOperationError; end

# source://isolator//lib/isolator/errors.rb#14
Isolator::HTTPError::MESSAGE = T.let(T.unsafe(nil), String)

# Handle ignoring isolator errors using a yml file
#
# source://isolator//lib/isolator/ignorer.rb#5
class Isolator::Ignorer
  class << self
    # @raise [ParseError]
    #
    # source://isolator//lib/isolator/ignorer.rb#18
    def prepare(path:, regex_string: T.unsafe(nil)); end
  end
end

# source://isolator//lib/isolator/ignorer.rb#38
class Isolator::Ignorer::AdapterIgnore
  # @return [AdapterIgnore] a new instance of AdapterIgnore
  #
  # source://isolator//lib/isolator/ignorer.rb#39
  def initialize(adapter:, ignored_paths:, regex_string:); end

  # source://isolator//lib/isolator/ignorer.rb#45
  def prepare; end

  private

  # Returns the value of attribute adapter.
  #
  # source://isolator//lib/isolator/ignorer.rb#53
  def adapter; end

  # Sets the attribute adapter
  #
  # @param value the value to set the attribute adapter to.
  #
  # source://isolator//lib/isolator/ignorer.rb#53
  def adapter=(_arg0); end

  # Returns the value of attribute ignored_paths.
  #
  # source://isolator//lib/isolator/ignorer.rb#53
  def ignored_paths; end

  # Sets the attribute ignored_paths
  #
  # @param value the value to set the attribute ignored_paths to.
  #
  # source://isolator//lib/isolator/ignorer.rb#53
  def ignored_paths=(_arg0); end

  # source://isolator//lib/isolator/ignorer.rb#55
  def ignores; end

  # source://isolator//lib/isolator/ignorer.rb#69
  def regex; end

  # Returns the value of attribute regex_string.
  #
  # source://isolator//lib/isolator/ignorer.rb#53
  def regex_string; end

  # Sets the attribute regex_string
  #
  # @param value the value to set the attribute regex_string to.
  #
  # source://isolator//lib/isolator/ignorer.rb#53
  def regex_string=(_arg0); end
end

# source://isolator//lib/isolator/ignorer.rb#6
class Isolator::Ignorer::ParseError < ::StandardError
  # @return [ParseError] a new instance of ParseError
  #
  # source://isolator//lib/isolator/ignorer.rb#7
  def initialize(file_path, klass); end

  # source://isolator//lib/isolator/ignorer.rb#12
  def message; end
end

# Add .isolate function to build and register adapters
#
# source://isolator//lib/isolator/isolate.rb#5
module Isolator::Isolate
  # source://isolator//lib/isolator/isolate.rb#6
  def isolate(id, **options); end

  # source://isolator//lib/isolator/isolate.rb#12
  def remove_adapter(id); end
end

# source://isolator//lib/isolator/errors.rb#22
class Isolator::MailerError < ::Isolator::UnsafeOperationError; end

# source://isolator//lib/isolator/errors.rb#23
Isolator::MailerError::MESSAGE = T.let(T.unsafe(nil), String)

# Wrapper over different notifications methods (exceptions, logging, uniform notifier)
#
# source://isolator//lib/isolator/notifier.rb#5
class Isolator::Notifier
  # @return [Notifier] a new instance of Notifier
  #
  # source://isolator//lib/isolator/notifier.rb#8
  def initialize(exception, backtrace = T.unsafe(nil)); end

  # Returns the value of attribute backtrace.
  #
  # source://isolator//lib/isolator/notifier.rb#6
  def backtrace; end

  # @raise [exception.class]
  #
  # source://isolator//lib/isolator/notifier.rb#13
  def call; end

  # Returns the value of attribute exception.
  #
  # source://isolator//lib/isolator/notifier.rb#6
  def exception; end

  private

  # source://isolator//lib/isolator/notifier.rb#58
  def filtered_backtrace; end

  # source://isolator//lib/isolator/notifier.rb#29
  def log_exception; end

  # @return [Boolean]
  #
  # source://isolator//lib/isolator/notifier.rb#21
  def raise_exceptions?; end

  # source://isolator//lib/isolator/notifier.rb#50
  def send_notifications; end

  # @return [Boolean]
  #
  # source://isolator//lib/isolator/notifier.rb#25
  def send_notifications?; end

  # @return [Boolean]
  #
  # source://isolator//lib/isolator/notifier.rb#62
  def uniform_notifier_loaded?; end
end

# source://isolator//lib/isolator/railtie.rb#4
class Isolator::Railtie < ::Rails::Railtie; end

# source://isolator//lib/isolator/railtie.rb#5
module Isolator::Railtie::TestFixtures
  # source://isolator//lib/isolator/railtie.rb#6
  def setup_fixtures(*_arg0); end

  # source://isolator//lib/isolator/railtie.rb#13
  def teardown_fixtures(*_arg0); end
end

# Hash with key accessors
#
# source://isolator//lib/isolator/simple_hashie.rb#5
class Isolator::SimpleHashie < ::Hash
  # source://isolator//lib/isolator/simple_hashie.rb#6
  def method_missing(key, *args, &block); end

  private

  # @return [Boolean]
  #
  # source://isolator//lib/isolator/simple_hashie.rb#16
  def respond_to_missing?(key); end
end

# source://isolator//lib/isolator/ext/thread_fetch.rb#4
module Isolator::ThreadFetch; end

# source://isolator//lib/isolator.rb#20
class Isolator::ThreadStateProxy
  # source://isolator//lib/isolator.rb#27
  def [](key); end

  # source://isolator//lib/isolator.rb#31
  def []=(key, value); end

  # source://isolator//lib/isolator.rb#23
  def initilize(prefix = T.unsafe(nil)); end

  # Returns the value of attribute prefix.
  #
  # source://isolator//lib/isolator.rb#21
  def prefix; end
end

# source://isolator//lib/isolator/errors.rb#4
class Isolator::UnsafeOperationError < ::StandardError
  # @return [UnsafeOperationError] a new instance of UnsafeOperationError
  #
  # source://isolator//lib/isolator/errors.rb#7
  def initialize(msg = T.unsafe(nil), details: T.unsafe(nil)); end
end

# source://isolator//lib/isolator/errors.rb#5
Isolator::UnsafeOperationError::MESSAGE = T.let(T.unsafe(nil), String)

# source://isolator//lib/isolator/version.rb#4
Isolator::VERSION = T.let(T.unsafe(nil), String)
