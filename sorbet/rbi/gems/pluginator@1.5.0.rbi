# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pluginator` gem.
# Please instead update this file by running `bin/tapioca gem pluginator`.


# A simple plugin system based on Gem.find_files
#
# source://pluginator//lib/pluginator/errors.rb#20
module Pluginator
  class << self
    # Find plugins for the given group
    #
    # @option extend
    # @option prefix
    # @option type
    # @param prefix [Hash] a customizable set of options
    # @param extend [Hash] a customizable set of options
    # @param options [Hash] options to pass to creating Pluginator instance
    # @param group [String] name of plugins group
    # @param type [Hash] a customizable set of options
    # @return [Pluginator::ExtendableAutodetect] instance of Pluginator
    #
    # source://pluginator//lib/pluginator.rb#36
    def find(group, options = T.unsafe(nil)); end
  end
end

# Add autodetection capabilities to Group
#
# @see Group, FormattedFinder
#
# source://pluginator//lib/pluginator/autodetect.rb#25
class Pluginator::Autodetect < ::Pluginator::Group
  include ::Pluginator::NameConverter

  # Automatically load plugins for given group (and type)
  #
  # @option type
  # @option prefix
  # @param group [String] name of the plugins group
  # @param options [Hash] options to pass to creating Pluginator instance
  # @param type [Hash] a customizable set of options
  # @param prefix [Hash] a customizable set of options
  # @return [Autodetect] a new instance of Autodetect
  #
  # source://pluginator//lib/pluginator/autodetect.rb#45
  def initialize(group, options = T.unsafe(nil)); end

  # Initiate another lookup for plugins
  # - does not clean the state
  # - does not resolve all gems, only the new ones
  #
  # Use it after gem list change, for example after `Gem.install("new_gem")`
  #
  # source://pluginator//lib/pluginator/autodetect.rb#57
  def refresh; end

  # Return the forced type
  #
  # source://pluginator//lib/pluginator/autodetect.rb#65
  def type; end

  private

  # source://pluginator//lib/pluginator/autodetect.rb#86
  def activate_plugins(plugins_to_activate); end

  # filter active / latest gem versions
  #
  # source://pluginator//lib/pluginator/autodetect.rb#97
  def active_or_latest_gems_matching(specifications); end

  # find active or latest gem in given set
  #
  # source://pluginator//lib/pluginator/autodetect.rb#104
  def active_or_latest_gemspec(specifications); end

  # source://pluginator//lib/pluginator/autodetect.rb#79
  def load_plugins(plugins_to_load); end

  # source://pluginator//lib/pluginator/autodetect.rb#73
  def register_plugins(plugins_to_register); end
end

# Find plugins
#
# source://pluginator//lib/pluginator/autodetect/finder.rb#24
class Pluginator::Autodetect::Finder
  # Automatically load plugins for given group (and type)
  #
  # @param force_prefix [String] a prefix for finding plugins if forcing,
  #   by default only `/lib` is checked,
  #   regexp notation is allowed, for example `/[lib|]`
  # @param group [String] name of the plugins group
  # @param force_type [String] name of the plugin type if forcing
  # @return [Finder] a new instance of Finder
  #
  # source://pluginator//lib/pluginator/autodetect/finder.rb#35
  def initialize(force_prefix, group, force_type); end

  # Returns the value of attribute gem_plugins_paths.
  #
  # source://pluginator//lib/pluginator/autodetect/finder.rb#26
  def gem_plugins_paths; end

  # Returns the value of attribute load_path_plugins_paths.
  #
  # source://pluginator//lib/pluginator/autodetect/finder.rb#26
  def load_path_plugins_paths; end

  # Returns the value of attribute loaded_plugins_path.
  #
  # source://pluginator//lib/pluginator/autodetect/finder.rb#26
  def loaded_plugins_path; end

  private

  # group => pattern
  #
  # source://pluginator//lib/pluginator/autodetect/finder.rb#46
  def file_name_pattern; end

  # source://pluginator//lib/pluginator/autodetect/finder.rb#68
  def find_gem_plugins; end

  # source://pluginator//lib/pluginator/autodetect/finder.rb#62
  def find_load_path_plugins; end

  # source://pluginator//lib/pluginator/autodetect/finder.rb#56
  def find_loaded_plugins; end

  # source://pluginator//lib/pluginator/autodetect/finder.rb#50
  def find_paths; end

  # file_name => [ path, full_name, type ]
  #
  # source://pluginator//lib/pluginator/autodetect/finder.rb#81
  def split_file_name(file_name); end

  # source://pluginator//lib/pluginator/autodetect/finder.rb#74
  def split_file_names(file_names); end
end

# Categorize plugins
# @see: Finder
#
# source://pluginator//lib/pluginator/autodetect/formatted_finder.rb#27
class Pluginator::Autodetect::FormattedFinder < ::Pluginator::Autodetect::Finder
  # Reformat plugin lists
  #
  # @return [FormattedFinder] a new instance of FormattedFinder
  #
  # source://pluginator//lib/pluginator/autodetect/formatted_finder.rb#30
  def initialize(force_prefix, group, force_type); end

  private

  # find active or latest gem in given set
  #
  # source://pluginator//lib/pluginator/autodetect/formatted_finder.rb#94
  def active_or_latest_gemspec(specifications); end

  # source://pluginator//lib/pluginator/autodetect/formatted_finder.rb#104
  def calculate_plugin_version(metadata, path); end

  # source://pluginator//lib/pluginator/autodetect/formatted_finder.rb#56
  def find_gem_specifications; end

  # source://pluginator//lib/pluginator/autodetect/formatted_finder.rb#89
  def find_latest_plugin_version(gemspecs, path); end

  # @return [Boolean]
  #
  # source://pluginator//lib/pluginator/autodetect/formatted_finder.rb#38
  def gem_has_method?(name); end

  # source://pluginator//lib/pluginator/autodetect/formatted_finder.rb#70
  def gemspec_for_path(path, specifications); end

  # source://pluginator//lib/pluginator/autodetect/formatted_finder.rb#83
  def gemspecs_for_path(path, specifications); end

  # source://pluginator//lib/pluginator/autodetect/formatted_finder.rb#98
  def gemspecs_sorted_by_metadata_and_version(gemspecs, path); end

  # source://pluginator//lib/pluginator/autodetect/formatted_finder.rb#48
  def map_gem_plugins; end

  # source://pluginator//lib/pluginator/autodetect/formatted_finder.rb#42
  def map_loaded_plugins; end
end

# Add extendability to Atudetect / Group
#
# @see Autodetect
# @see Group
#
# source://pluginator//lib/pluginator/extendable_autodetect.rb#32
class Pluginator::ExtendableAutodetect < ::Pluginator::Autodetect
  # Automatically load plugins for given group (and type)
  # Extend instance with extensions if given.
  #
  # @option type
  # @option extends
  # @param group [String] name of the plugins group
  # @param options [Hash] options to pass to creating Pluginator instance
  # @param type [Hash] a customizable set of options
  # @param extends [Hash] a customizable set of options
  # @return [ExtendableAutodetect] a new instance of ExtendableAutodetect
  #
  # source://pluginator//lib/pluginator/extendable_autodetect.rb#41
  def initialize(group, options = T.unsafe(nil)); end

  # Extend pluginator instance with given extensions
  #
  # @param extends [Array<Symbol>|Symbol] list of extension to extend into pluginator instance
  #
  # source://pluginator//lib/pluginator/extendable_autodetect.rb#49
  def extend_plugins(extends); end

  private

  # source://pluginator//lib/pluginator/extendable_autodetect.rb#65
  def extensions_matching(extends); end

  # source://pluginator//lib/pluginator/extendable_autodetect.rb#57
  def pluginator_plugins; end
end

# source://pluginator//lib/pluginator/extendable_autodetect.rb#26
module Pluginator::Extensions; end

# a placeholder for methods to convert strings
#
# source://pluginator//lib/plugins/pluginator/extensions/conversions.rb#22
module Pluginator::Extensions::Conversions
  # gets class name last part
  #
  # @param klass [Class] class to read
  # @return [String] the class name only without nesting
  #
  # source://pluginator//lib/plugins/pluginator/extensions/conversions.rb#44
  def class2name(klass); end

  # converts class name to a file name
  #
  # @param klass [String] class like string
  # @return [String] file like string
  #
  # source://pluginator//lib/plugins/pluginator/extensions/conversions.rb#28
  def class2string(klass); end

  # converts file name to a class name
  #
  # @param str [String] file like string
  # @return [String] class like string
  #
  # source://pluginator//lib/plugins/pluginator/extensions/conversions.rb#36
  def string2class(str); end
end

# Initial data for pluginator, includes group name and plugins
#
# source://pluginator//lib/pluginator/group.rb#22
class Pluginator::Group
  # sets up new instance and initial configuration
  #
  # @param group [String] name of the plugins group
  # @return [Group] a new instance of Group
  #
  # source://pluginator//lib/pluginator/group.rb#28
  def initialize(group); end

  # @param type [String] of plugins to select
  # @return [Array] list of plugins for type
  #
  # source://pluginator//lib/pluginator/group.rb#34
  def [](type); end

  # Group name used for plugins
  #
  # source://pluginator//lib/pluginator/group.rb#24
  def group; end

  # Register a new plugin, can be used to load custom plugins
  #
  # @param type [String] type for the klass
  # @param klass [Class] klass of the plugin to add
  #
  # source://pluginator//lib/pluginator/group.rb#47
  def register_plugin(type, klass); end

  # @return [Array] list of plugin types loaded
  #
  # source://pluginator//lib/pluginator/group.rb#39
  def types; end

  private

  # source://pluginator//lib/pluginator/group.rb#55
  def setup_group(group); end
end

# raised when plugin can not be found, generated by `*!` methods
#
# source://pluginator//lib/pluginator/errors.rb#32
class Pluginator::MissingPlugin < ::Pluginator::PluginatorError
  # initialize new error
  #
  # @param type [String] type of the loaded plugin
  # @param name [String] name of the loaded plugin
  # @param list [Array] list of available plugins
  # @return [MissingPlugin] a new instance of MissingPlugin
  #
  # source://pluginator//lib/pluginator/errors.rb#37
  def initialize(type, name, list); end
end

# raised when type can not be found, generated by `*!` methods
#
# source://pluginator//lib/pluginator/errors.rb#43
class Pluginator::MissingType < ::Pluginator::PluginatorError
  # initialize new error
  #
  # @param type [String] type of the loaded plugin
  # @param list [Array] list of available types
  # @return [MissingType] a new instance of MissingType
  #
  # source://pluginator//lib/pluginator/errors.rb#47
  def initialize(type, list); end
end

# a helper for handling name / file / class conversions
#
# source://pluginator//lib/pluginator/name_converter.rb#22
module Pluginator::NameConverter
  private

  # full_name => class
  #
  # source://pluginator//lib/pluginator/name_converter.rb#26
  def name2class(name); end
end

# base error for all Pluginator errors
#
# source://pluginator//lib/pluginator/errors.rb#23
class Pluginator::PluginatorError < ::RuntimeError
  private

  # source://pluginator//lib/pluginator/errors.rb#26
  def list_to_s(list); end
end

# Version of Pluginator
#
# source://pluginator//lib/pluginator/version.rb#22
Pluginator::VERSION = T.let(T.unsafe(nil), String)
