# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pre-commit` gem.
# Please instead update this file by running `bin/tapioca gem pre-commit`.


# The pre-commit gem.
#
# source://pre-commit//lib/pre-commit/configuration/top_level.rb#1
module PreCommit
  class << self
    # Can not delete this method with out a deprecation strategy.
    # It is refered to in the generated pre-commit hook in versions 0.0-0.1.1
    #
    # NOTE: The deprecation strategy *may* be just delete it since, we're still
    # pre 1.0.
    #
    # Actually, on the deprecation note. This method isn't really the problem.
    # The problem is the default generated pre-commit hook. It shouldn't have
    # logic in it. The we have freedom to change the gem implementation however
    # we want, and nobody is forced to update their pre-commit binary.
    #
    # source://pre-commit//lib/pre-commit.rb#18
    def checks_to_run; end

    # source://pre-commit//lib/pre-commit/plugins_list.rb#3
    def pluginator; end

    # source://pre-commit//lib/pre-commit.rb#23
    def run; end

    # source://pre-commit//lib/pre-commit.rb#27
    def runner; end
  end
end

# source://pre-commit//lib/pre-commit/configuration/top_level.rb#2
class PreCommit::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://pre-commit//lib/pre-commit/configuration.rb#9
  def initialize(pluginator, providers = T.unsafe(nil)); end

  # source://pre-commit//lib/pre-commit/configuration.rb#42
  def disable(plugin_name, type, check1, *checks); end

  # source://pre-commit//lib/pre-commit/configuration.rb#31
  def enable(plugin_name, type, check1, *checks); end

  # source://pre-commit//lib/pre-commit/configuration.rb#14
  def get(name); end

  # source://pre-commit//lib/pre-commit/configuration.rb#18
  def get_arr(name); end

  # source://pre-commit//lib/pre-commit/configuration.rb#27
  def get_combined(name); end

  # Returns the value of attribute pluginator.
  #
  # source://pre-commit//lib/pre-commit/configuration.rb#7
  def pluginator; end

  # Returns the value of attribute providers.
  #
  # source://pre-commit//lib/pre-commit/configuration.rb#7
  def providers; end
end

# source://pre-commit//lib/pre-commit/configuration/providers.rb#11
class PreCommit::Configuration::Providers
  include ::Pluginator::Extensions::Conversions

  # @return [Providers] a new instance of Providers
  #
  # source://pre-commit//lib/pre-commit/configuration/providers.rb#14
  def initialize(pluginator, plugins = T.unsafe(nil)); end

  # source://pre-commit//lib/pre-commit/configuration/providers.rb#19
  def [](name); end

  # source://pre-commit//lib/pre-commit/configuration/providers.rb#23
  def default(name); end

  # source://pre-commit//lib/pre-commit/configuration/providers.rb#36
  def list; end

  # @raise [PreCommit::NotAnArray]
  #
  # source://pre-commit//lib/pre-commit/configuration/providers.rb#27
  def update(plugin_name, name, operation, list); end

  private

  # source://pre-commit//lib/pre-commit/configuration/providers.rb#45
  def find_update_plugin(plugin_name); end

  # source://pre-commit//lib/pre-commit/configuration/providers.rb#41
  def plugins; end
end

# source://pre-commit//lib/pre-commit/configuration/top_level.rb#3
module PreCommit::Configuration::TopLevel
  # source://pre-commit//lib/pre-commit/configuration/top_level.rb#4
  def top_level; end
end

# source://pre-commit//lib/pre-commit/error_list.rb#4
class PreCommit::ErrorList < ::Struct
  # @return [ErrorList] a new instance of ErrorList
  #
  # source://pre-commit//lib/pre-commit/error_list.rb#6
  def initialize(errors = T.unsafe(nil)); end

  # source://pre-commit//lib/pre-commit/error_list.rb#14
  def to_a; end

  # source://pre-commit//lib/pre-commit/error_list.rb#18
  def to_s; end
end

# source://pre-commit//lib/pre-commit/line.rb#2
class PreCommit::Line < ::Struct
  # source://pre-commit//lib/pre-commit/line.rb#4
  def to_s; end

  protected

  # @return [Boolean]
  #
  # source://pre-commit//lib/pre-commit/line.rb#16
  def empty?(string); end
end

# source://pre-commit//lib/pre-commit/list_evaluator.rb#7
class PreCommit::ListEvaluator
  include ::Pluginator::Extensions::Conversions

  # @return [ListEvaluator] a new instance of ListEvaluator
  #
  # source://pre-commit//lib/pre-commit/list_evaluator.rb#12
  def initialize(config); end

  # source://pre-commit//lib/pre-commit/list_evaluator.rb#35
  def checks_config; end

  # source://pre-commit//lib/pre-commit/list_evaluator.rb#39
  def checks_evaluated(type = T.unsafe(nil)); end

  # Returns the value of attribute config.
  #
  # source://pre-commit//lib/pre-commit/list_evaluator.rb#10
  def config; end

  # source://pre-commit//lib/pre-commit/list_evaluator.rb#16
  def list; end

  # source://pre-commit//lib/pre-commit/list_evaluator.rb#29
  def plugins; end

  # source://pre-commit//lib/pre-commit/list_evaluator.rb#45
  def warnings_config; end

  # source://pre-commit//lib/pre-commit/list_evaluator.rb#49
  def warnings_evaluated(type = T.unsafe(nil)); end

  private

  # source://pre-commit//lib/pre-commit/list_evaluator.rb#61
  def format_plugin(name, separator, plugin); end

  # source://pre-commit//lib/pre-commit/list_evaluator.rb#72
  def get_arr_checks_remove; end

  # source://pre-commit//lib/pre-commit/list_evaluator.rb#80
  def get_arr_warnings_remove; end

  # source://pre-commit//lib/pre-commit/list_evaluator.rb#68
  def get_combined_checks; end

  # source://pre-commit//lib/pre-commit/list_evaluator.rb#76
  def get_combined_warnings; end

  # source://pre-commit//lib/pre-commit/list_evaluator.rb#57
  def plugin_names; end
end

# source://pre-commit//lib/pre-commit/configuration/providers.rb#4
class PreCommit::NotAnArray < ::StandardError; end

# source://pre-commit//lib/pre-commit/configuration/providers.rb#7
class PreCommit::PluginNotFound < ::StandardError; end

# source://pre-commit//lib/pre-commit/plugins_list.rb#7
class PreCommit::PluginsList
  # @return [PluginsList] a new instance of PluginsList
  #
  # source://pre-commit//lib/pre-commit/plugins_list.rb#10
  def initialize(configured_names, configured_remove, &block); end

  # Returns the value of attribute configured_names.
  #
  # source://pre-commit//lib/pre-commit/plugins_list.rb#8
  def configured_names; end

  # Returns the value of attribute configured_remove.
  #
  # source://pre-commit//lib/pre-commit/plugins_list.rb#8
  def configured_remove; end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#16
  def evaluated_names; end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#20
  def list_to_run; end

  private

  # source://pre-commit//lib/pre-commit/plugins_list.rb#55
  def class_and_includes(name, klass); end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#63
  def class_excludes(klass); end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#77
  def configured_remove_aliases; end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#26
  def evaluated_names_(list); end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#34
  def evaluated_names_pairs; end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#59
  def excludes(list); end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#71
  def filter_callable(list); end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#67
  def filter_excludes(list, excludes); end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#47
  def find_class(name); end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#51
  def find_classes(list); end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#43
  def find_classes_and_includes(list); end

  # source://pre-commit//lib/pre-commit/plugins_list.rb#30
  def list_to_run_(list); end
end

# source://pre-commit//lib/pre-commit/runner.rb#10
class PreCommit::Runner
  include ::PreCommit::Configuration::TopLevel
  include ::PreCommit::Utils::StagedFiles

  # @return [Runner] a new instance of Runner
  #
  # source://pre-commit//lib/pre-commit/runner.rb#15
  def initialize(stderr = T.unsafe(nil), staged_files = T.unsafe(nil), config = T.unsafe(nil), pluginator = T.unsafe(nil)); end

  # source://pre-commit//lib/pre-commit/runner.rb#71
  def checks(list); end

  # Returns the value of attribute config.
  #
  # source://pre-commit//lib/pre-commit/runner.rb#13
  def config; end

  # Returns the value of attribute debug.
  #
  # source://pre-commit//lib/pre-commit/runner.rb#13
  def debug; end

  # source://pre-commit//lib/pre-commit/runner.rb#80
  def errors_to_string(list); end

  # source://pre-commit//lib/pre-commit/runner.rb#42
  def execute(list); end

  # source://pre-commit//lib/pre-commit/runner.rb#60
  def list_evaluator; end

  # source://pre-commit//lib/pre-commit/runner.rb#56
  def list_to_run(name); end

  # Returns the value of attribute pluginator.
  #
  # source://pre-commit//lib/pre-commit/runner.rb#13
  def pluginator; end

  # source://pre-commit//lib/pre-commit/runner.rb#23
  def run(*args); end

  # source://pre-commit//lib/pre-commit/runner.rb#30
  def run_single(name); end

  # source://pre-commit//lib/pre-commit/runner.rb#34
  def show_output(name, list); end

  # source://pre-commit//lib/pre-commit/runner.rb#64
  def warnings(list); end
end

# source://pre-commit//lib/pre-commit/utils/staged_files.rb#6
module PreCommit::Utils; end

# source://pre-commit//lib/pre-commit/utils/staged_files.rb#7
module PreCommit::Utils::StagedFiles
  include ::PreCommit::Configuration::TopLevel

  # Make a best guess to determine if this is a binary file.
  # This is not an exact science ;)
  #
  # @return [Boolean]
  #
  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#62
  def appears_binary?(filename); end

  # Try to bail out quickly based on filename.
  #
  # If the extension is `.jpg` this is likely not a source code file.
  # So let's not waste time checking to see if it's "binary" (as best we
  # can guess) and let's not run any checks on it.
  #
  # @return [Boolean]
  #
  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#56
  def ignore_extension?(filename); end

  # @return [Boolean]
  #
  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#67
  def repo_ignored?(filename); end

  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#21
  def set_staged_files(*args); end

  # Definitely include this file in the checks.
  #
  # @return [Boolean]
  #
  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#47
  def source_file?(filename); end

  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#34
  def staged_files; end

  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#30
  def staged_files=(args); end

  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#38
  def staged_files_all; end

  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#42
  def staged_files_git_all; end

  private

  # from https://github.com/djberg96/ptools/blob/master/lib/ptools.rb#L90
  #
  # @return [Boolean]
  #
  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#73
  def binary?(file); end

  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#81
  def filter_files(files); end

  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#112
  def repo_ignores; end

  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#108
  def repo_ignores_file; end

  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#104
  def staged_from_dir; end

  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#96
  def staged_from_git; end

  # source://pre-commit//lib/pre-commit/utils/staged_files.rb#100
  def staged_from_git_all; end
end

# source://pre-commit//lib/pre-commit/utils/staged_files.rb#10
PreCommit::Utils::StagedFiles::BINARIES = T.let(T.unsafe(nil), Array)

# source://pre-commit//lib/pre-commit/utils/staged_files.rb#14
PreCommit::Utils::StagedFiles::IGNORED_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://pre-commit//lib/pre-commit/utils/staged_files.rb#13
PreCommit::Utils::StagedFiles::IMAGES = T.let(T.unsafe(nil), Array)

# source://pre-commit//lib/pre-commit/utils/staged_files.rb#16
PreCommit::Utils::StagedFiles::SOURCE_FILES = T.let(T.unsafe(nil), Array)
