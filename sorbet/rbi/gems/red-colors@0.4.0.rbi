# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `red-colors` gem.
# Please instead update this file by running `bin/tapioca gem red-colors`.


# source://red-colors//lib/colors/utils.rb#1
module Colors
  class << self
    # source://red-colors//lib/colors.rb#38
    def [](name); end

    # source://red-colors//lib/colors.rb#30
    def desaturate(c, factor); end
  end
end

# source://red-colors//lib/colors/abstract_color.rb#2
class Colors::AbstractColor
  # source://red-colors//lib/colors/abstract_color.rb#3
  def desaturate(factor); end

  # source://red-colors//lib/colors/abstract_color.rb#7
  def inspect; end

  private

  # source://red-colors//lib/colors/abstract_color.rb#15
  def canonicalize_component(value, name); end

  # source://red-colors//lib/colors/abstract_color.rb#24
  def canonicalize_component_from_integer(value, name); end

  # source://red-colors//lib/colors/abstract_color.rb#28
  def canonicalize_component_to_rational(value, name); end

  # @raise [NotImplementedError]
  #
  # source://red-colors//lib/colors/abstract_color.rb#11
  def unsupported(name); end
end

# source://red-colors//lib/colors/alpha_component.rb#2
module Colors::AlphaComponent
  # Returns the value of attribute a.
  #
  # source://red-colors//lib/colors/alpha_component.rb#3
  def a; end

  # source://red-colors//lib/colors/alpha_component.rb#5
  def a=(a); end

  # Returns the value of attribute a.
  def alpha; end

  # source://red-colors//lib/colors/alpha_component.rb#5
  def alpha=(a); end
end

# source://red-colors//lib/colors/css.rb#2
module Colors::CSS
  class << self
    # Factory method for generating RGB/RGBA/HSL/HSLA Objects.
    # Parsing based on spec https://www.w3.org/TR/css-color-3 ; section 4.2
    #
    # source://red-colors//lib/colors/css.rb#5
    def parse(css_string); end
  end
end

# source://red-colors//lib/colors/color_data.rb#2
module Colors::ColorData; end

# Matplotlib's base colors
#
# source://red-colors//lib/colors/color_data.rb#8
Colors::ColorData::BASE_COLORS = T.let(T.unsafe(nil), Hash)

# https://drafts.csswg.org/css-color-4/#named-colors
#
# source://red-colors//lib/colors/color_data.rb#995
Colors::ColorData::CSS4_COLORS = T.let(T.unsafe(nil), Hash)

# The default value of matplotlib's rcParams['axes.prop_cycle'].by_key().get('color')
#
# source://red-colors//lib/colors/color_data.rb#4
Colors::ColorData::DEFAULT_COLOR_CYCLE = T.let(T.unsafe(nil), Array)

# Colors from Tableau
#
# source://red-colors//lib/colors/color_data.rb#20
Colors::ColorData::TABLEAU_COLORS = T.let(T.unsafe(nil), Hash)

# source://red-colors//lib/colors/color_data.rb#42
Colors::ColorData::XKCD_COLORS = T.let(T.unsafe(nil), Hash)

# source://red-colors//lib/colors/colormap.rb#2
class Colors::Colormap
  # @return [Colormap] a new instance of Colormap
  #
  # source://red-colors//lib/colors/colormap.rb#3
  def initialize(name, n_colors); end

  # source://red-colors//lib/colors/colormap.rb#17
  def [](x); end

  # Returns the value of attribute n_colors.
  #
  # source://red-colors//lib/colors/colormap.rb#15
  def n_colors; end

  # Returns the value of attribute name.
  #
  # source://red-colors//lib/colors/colormap.rb#15
  def name; end

  # source://red-colors//lib/colors/colormap.rb#50
  def over_color; end

  # source://red-colors//lib/colors/colormap.rb#55
  def over_color=(color); end

  # source://red-colors//lib/colors/colormap.rb#70
  def reversed; end

  # source://red-colors//lib/colors/colormap.rb#97
  def to_html; end

  # source://red-colors//lib/colors/colormap.rb#85
  def to_png; end

  # source://red-colors//lib/colors/colormap.rb#60
  def under_color; end

  # source://red-colors//lib/colors/colormap.rb#65
  def under_color=(color); end

  private

  # @return [Boolean]
  #
  # source://red-colors//lib/colors/colormap.rb#133
  def all_ratio?(ary); end

  # source://red-colors//lib/colors/colormap.rb#120
  def html_color_block(color); end

  # @raise [NotImplementedError]
  #
  # source://red-colors//lib/colors/colormap.rb#129
  def init_colormap; end

  # @raise [NotImplementedError]
  #
  # source://red-colors//lib/colors/colormap.rb#78
  def make_reverse_colormap(name); end

  # source://red-colors//lib/colors/colormap.rb#137
  def update_extreme_colors; end
end

# source://red-colors//lib/colors/colormap.rb#83
Colors::Colormap::PNG_HEIGHT = T.let(T.unsafe(nil), Integer)

# source://red-colors//lib/colors/colormap.rb#82
Colors::Colormap::PNG_WIDTH = T.let(T.unsafe(nil), Integer)

# source://red-colors//lib/colors/colormap_registry.rb#2
module Colors::ColormapRegistry
  class << self
    # source://red-colors//lib/colors/colormap_registry.rb#5
    def [](name); end

    # source://red-colors//lib/colors/colormap_registry.rb#16
    def register(cmap, name: T.unsafe(nil), override_builtin: T.unsafe(nil)); end

    # source://red-colors//lib/colors/colormap_registry.rb#50
    def unregister(name); end
  end
end

# source://red-colors//lib/colors/colormap_data.rb#6
Colors::ColormapRegistry::BUILTIN_COLORMAPS = T.let(T.unsafe(nil), Hash)

# source://red-colors//lib/colors/colormap_data.rb#7
Colors::ColormapRegistry::LUT_SIZE = T.let(T.unsafe(nil), Integer)

# source://red-colors//lib/colors/convert.rb#4
module Colors::Convert
  private

  # source://red-colors//lib/colors/convert.rb#192
  def closest_xterm256_gray_index(r, g, b); end

  # source://red-colors//lib/colors/convert.rb#184
  def closest_xterm256_rgb_index(x); end

  # 2 * pi / 360
  #
  # source://red-colors//lib/colors/convert.rb#64
  def degree_to_radian(d); end

  # Utilities
  #
  # source://red-colors//lib/colors/convert.rb#11
  def dot_product(matrix, vector); end

  # LCh -> ???
  #
  # source://red-colors//lib/colors/convert.rb#70
  def lch_to_husl(l, c, h); end

  # source://red-colors//lib/colors/convert.rb#83
  def lch_to_luv(l, c, h); end

  # source://red-colors//lib/colors/convert.rb#90
  def lch_to_xyz(l, c, h); end

  # linear-sRGB -> ???
  #
  # source://red-colors//lib/colors/convert.rb#96
  def linear_srgb_to_srgb(r, g, b); end

  # source://red-colors//lib/colors/convert.rb#39
  def luminance_bounds(l); end

  # Luv -> ???
  #
  # source://red-colors//lib/colors/convert.rb#113
  def luv_to_husl(l, u, v); end

  # source://red-colors//lib/colors/convert.rb#117
  def luv_to_lch(l, u, v); end

  # source://red-colors//lib/colors/convert.rb#125
  def luv_to_xyz(l, u, v); end

  # source://red-colors//lib/colors/convert.rb#21
  def matrix_inv(matrix); end

  # source://red-colors//lib/colors/convert.rb#26
  def max_chroma(l, h); end

  # source://red-colors//lib/colors/convert.rb#153
  def rgb_to_greyscale(r, g, b); end

  # source://red-colors//lib/colors/convert.rb#159
  def rgb_to_xterm256(r, g, b); end

  # source://red-colors//lib/colors/convert.rb#149
  def rgb_to_xyz(r, g, b); end

  # sRGB -> ???
  #
  # source://red-colors//lib/colors/convert.rb#206
  def srgb_from_linear_srgb(r, g, b); end

  # source://red-colors//lib/colors/convert.rb#217
  def srgb_to_linear_srgb(r, g, b); end

  # source://red-colors//lib/colors/convert.rb#200
  def xterm256_gray_index_to_code(i); end

  # source://red-colors//lib/colors/convert.rb#188
  def xterm256_gray_index_to_gray_level(i); end

  # source://red-colors//lib/colors/convert.rb#180
  def xterm256_rgb_index_to_rgb_value(i); end

  # source://red-colors//lib/colors/convert.rb#196
  def xterm256_rgb_indices_to_code(i, j, k); end

  # xyY -> ???
  #
  # source://red-colors//lib/colors/convert.rb#230
  def xyy_to_xyz(x, y, large_y); end

  # source://red-colors//lib/colors/convert.rb#265
  def xyz_to_rgb(x, y, z); end

  class << self
    # source://red-colors//lib/colors/convert.rb#192
    def closest_xterm256_gray_index(r, g, b); end

    # source://red-colors//lib/colors/convert.rb#184
    def closest_xterm256_rgb_index(x); end

    # 2 * pi / 360
    #
    # source://red-colors//lib/colors/convert.rb#64
    def degree_to_radian(d); end

    # source://red-colors//lib/colors/convert.rb#11
    def dot_product(matrix, vector); end

    # LCh -> ???
    #
    # source://red-colors//lib/colors/convert.rb#70
    def lch_to_husl(l, c, h); end

    # source://red-colors//lib/colors/convert.rb#83
    def lch_to_luv(l, c, h); end

    # source://red-colors//lib/colors/convert.rb#90
    def lch_to_xyz(l, c, h); end

    # linear-sRGB -> ???
    #
    # source://red-colors//lib/colors/convert.rb#96
    def linear_srgb_to_srgb(r, g, b); end

    # source://red-colors//lib/colors/convert.rb#39
    def luminance_bounds(l); end

    # Luv -> ???
    #
    # source://red-colors//lib/colors/convert.rb#113
    def luv_to_husl(l, u, v); end

    # source://red-colors//lib/colors/convert.rb#117
    def luv_to_lch(l, u, v); end

    # source://red-colors//lib/colors/convert.rb#125
    def luv_to_xyz(l, u, v); end

    # source://red-colors//lib/colors/convert.rb#21
    def matrix_inv(matrix); end

    # source://red-colors//lib/colors/convert.rb#26
    def max_chroma(l, h); end

    # source://red-colors//lib/colors/convert.rb#153
    def rgb_to_greyscale(r, g, b); end

    # source://red-colors//lib/colors/convert.rb#159
    def rgb_to_xterm256(r, g, b); end

    # source://red-colors//lib/colors/convert.rb#149
    def rgb_to_xyz(r, g, b); end

    # sRGB -> ???
    #
    # source://red-colors//lib/colors/convert.rb#206
    def srgb_from_linear_srgb(r, g, b); end

    # source://red-colors//lib/colors/convert.rb#217
    def srgb_to_linear_srgb(r, g, b); end

    # source://red-colors//lib/colors/convert.rb#200
    def xterm256_gray_index_to_code(i); end

    # source://red-colors//lib/colors/convert.rb#188
    def xterm256_gray_index_to_gray_level(i); end

    # source://red-colors//lib/colors/convert.rb#180
    def xterm256_rgb_index_to_rgb_value(i); end

    # source://red-colors//lib/colors/convert.rb#196
    def xterm256_rgb_indices_to_code(i, j, k); end

    # xyY -> ???
    #
    # source://red-colors//lib/colors/convert.rb#230
    def xyy_to_xyz(x, y, large_y); end

    # source://red-colors//lib/colors/convert.rb#265
    def xyz_to_rgb(x, y, z); end
  end
end

# source://red-colors//lib/colors/convert.rb#246
Colors::Convert::B_XYZ = T.let(T.unsafe(nil), Array)

# source://red-colors//lib/colors/convert.rb#241
Colors::Convert::B_xyY = T.let(T.unsafe(nil), Array)

# source://red-colors//lib/colors/convert.rb#247
Colors::Convert::D65_XYZ = T.let(T.unsafe(nil), Array)

# source://red-colors//lib/colors/convert.rb#242
Colors::Convert::D65_xyY = T.let(T.unsafe(nil), Array)

# source://red-colors//lib/colors/convert.rb#63
Colors::Convert::DEG2RAD = T.let(T.unsafe(nil), Rational)

# source://red-colors//lib/colors/convert.rb#245
Colors::Convert::G_XYZ = T.let(T.unsafe(nil), Array)

# source://red-colors//lib/colors/convert.rb#240
Colors::Convert::G_xyY = T.let(T.unsafe(nil), Array)

# source://red-colors//lib/colors/convert.rb#249
Colors::Convert::M_P = T.let(T.unsafe(nil), Array)

# source://red-colors//lib/colors/convert.rb#257
Colors::Convert::M_RGB_XYZ = T.let(T.unsafe(nil), Array)

# source://red-colors//lib/colors/convert.rb#255
Colors::Convert::M_S = T.let(T.unsafe(nil), Array)

# source://red-colors//lib/colors/convert.rb#261
Colors::Convert::M_XYZ_RGB = T.let(T.unsafe(nil), Array)

# RGB -> ???
#
# source://red-colors//lib/colors/convert.rb#143
Colors::Convert::RGB2XYZ = T.let(T.unsafe(nil), Array)

# source://red-colors//lib/colors/convert.rb#244
Colors::Convert::R_XYZ = T.let(T.unsafe(nil), Array)

# sRGB reference points
#
# source://red-colors//lib/colors/convert.rb#239
Colors::Convert::R_xyY = T.let(T.unsafe(nil), Array)

# source://red-colors//lib/colors/hsl.rb#2
class Colors::HSL < ::Colors::AbstractColor
  include ::Colors::Helper

  # @return [HSL] a new instance of HSL
  #
  # source://red-colors//lib/colors/hsl.rb#5
  def initialize(h, s, l); end

  # source://red-colors//lib/colors/hsl.rb#45
  def ==(other); end

  # source://red-colors//lib/colors/hsl.rb#11
  def components; end

  # source://red-colors//lib/colors/hsl.rb#56
  def desaturate(factor); end

  # Returns the value of attribute h.
  #
  # source://red-colors//lib/colors/hsl.rb#9
  def h; end

  # source://red-colors//lib/colors/hsl.rb#17
  def h=(h); end

  # source://red-colors//lib/colors/hsl.rb#11
  def hsl_components; end

  # Returns the value of attribute h.
  #
  # source://red-colors//lib/colors/hsl.rb#9
  def hue; end

  # source://red-colors//lib/colors/hsl.rb#17
  def hue=(h); end

  # Returns the value of attribute l.
  #
  # source://red-colors//lib/colors/hsl.rb#9
  def l; end

  # source://red-colors//lib/colors/hsl.rb#29
  def l=(l); end

  # Returns the value of attribute l.
  #
  # source://red-colors//lib/colors/hsl.rb#9
  def lightness; end

  # source://red-colors//lib/colors/hsl.rb#29
  def lightness=(l); end

  # source://red-colors//lib/colors/hsl.rb#78
  def rgb_components; end

  # Returns the value of attribute s.
  #
  # source://red-colors//lib/colors/hsl.rb#9
  def s; end

  # source://red-colors//lib/colors/hsl.rb#21
  def s=(s); end

  # Returns the value of attribute s.
  #
  # source://red-colors//lib/colors/hsl.rb#9
  def saturation; end

  # source://red-colors//lib/colors/hsl.rb#21
  def saturation=(s); end

  # source://red-colors//lib/colors/hsl.rb#60
  def to_hsl; end

  # source://red-colors//lib/colors/hsl.rb#64
  def to_hsla(alpha: T.unsafe(nil)); end

  # source://red-colors//lib/colors/hsl.rb#69
  def to_rgb; end

  # source://red-colors//lib/colors/hsl.rb#73
  def to_rgba(alpha: T.unsafe(nil)); end

  private

  # source://red-colors//lib/colors/hsl.rb#106
  def canonicalize(h, s, l); end

  # source://red-colors//lib/colors/hsl.rb#118
  def canonicalize_from_integer(h, s, l); end

  # source://red-colors//lib/colors/hsl.rb#92
  def hue_to_rgb(t1, t2, h); end
end

# source://red-colors//lib/colors/hsla.rb#2
class Colors::HSLA < ::Colors::HSL
  include ::Colors::AlphaComponent

  # @return [HSLA] a new instance of HSLA
  #
  # source://red-colors//lib/colors/hsla.rb#3
  def initialize(h, s, l, a); end

  # source://red-colors//lib/colors/hsla.rb#15
  def ==(other); end

  # source://red-colors//lib/colors/hsla.rb#9
  def components; end

  # source://red-colors//lib/colors/hsla.rb#26
  def desaturate(factor); end

  # source://red-colors//lib/colors/hsla.rb#9
  def hsla_components; end

  # source://red-colors//lib/colors/hsla.rb#38
  def to_hsl; end

  # source://red-colors//lib/colors/hsla.rb#30
  def to_hsla; end

  # source://red-colors//lib/colors/hsla.rb#47
  def to_rgb; end

  # source://red-colors//lib/colors/hsla.rb#34
  def to_rgba; end

  private

  # source://red-colors//lib/colors/hsla.rb#56
  def canonicalize(h, s, l, a); end

  # source://red-colors//lib/colors/hsla.rb#69
  def canonicalize_from_integer(h, s, l, a); end
end

# Human-friendly alternative to HSL color space.
# The definition of HUSL is provided in <http://www.hsluv.org>.
#
# source://red-colors//lib/colors/husl.rb#4
class Colors::HUSL < ::Colors::HSL
  # source://red-colors//lib/colors/husl.rb#5
  def ==(other); end

  # source://red-colors//lib/colors/husl.rb#14
  def desaturate(factor); end

  # source://red-colors//lib/colors/husl.rb#35
  def lch_components; end

  # source://red-colors//lib/colors/husl.rb#31
  def rgb_components; end

  # source://red-colors//lib/colors/husl.rb#18
  def to_husl; end

  # source://red-colors//lib/colors/husl.rb#22
  def to_rgb; end

  # source://red-colors//lib/colors/husl.rb#26
  def to_xyz; end
end

# source://red-colors//lib/colors/helper.rb#2
module Colors::Helper
  private

  # @raise [exc_class]
  #
  # source://red-colors//lib/colors/helper.rb#14
  def check_fail(exc_class, message); end

  # source://red-colors//lib/colors/helper.rb#8
  def check_range(value, range, name); end

  # source://red-colors//lib/colors/helper.rb#3
  def check_type(obj, type, name); end
end

# source://red-colors//lib/colors/linear_segmented_colormap.rb#2
class Colors::LinearSegmentedColormap < ::Colors::Colormap
  # @return [LinearSegmentedColormap] a new instance of LinearSegmentedColormap
  #
  # source://red-colors//lib/colors/linear_segmented_colormap.rb#3
  def initialize(name, segmented_data, n_colors: T.unsafe(nil), gamma: T.unsafe(nil)); end

  # Returns the value of attribute gamma.
  #
  # source://red-colors//lib/colors/linear_segmented_colormap.rb#11
  def gamma; end

  # source://red-colors//lib/colors/linear_segmented_colormap.rb#50
  def gamma=(val); end

  # Returns the value of attribute segmented_data.
  #
  # source://red-colors//lib/colors/linear_segmented_colormap.rb#11
  def segmented_data; end

  private

  # source://red-colors//lib/colors/linear_segmented_colormap.rb#69
  def create_lookup_table(n, data, gamma = T.unsafe(nil)); end

  # source://red-colors//lib/colors/linear_segmented_colormap.rb#55
  def init_colormap; end

  # source://red-colors//lib/colors/linear_segmented_colormap.rb#131
  def make_inverse_func(f); end

  # source://red-colors//lib/colors/linear_segmented_colormap.rb#117
  def make_reverse_colormap(name); end

  class << self
    # source://red-colors//lib/colors/linear_segmented_colormap.rb#13
    def new_from_list(name, colors, n_colors: T.unsafe(nil), gamma: T.unsafe(nil)); end
  end
end

# source://red-colors//lib/colors/listed_colormap.rb#2
class Colors::ListedColormap < ::Colors::Colormap
  # @return [ListedColormap] a new instance of ListedColormap
  #
  # source://red-colors//lib/colors/listed_colormap.rb#3
  def initialize(colors, name: T.unsafe(nil), n_colors: T.unsafe(nil)); end

  # Returns the value of attribute colors.
  #
  # source://red-colors//lib/colors/listed_colormap.rb#33
  def colors; end

  private

  # source://red-colors//lib/colors/listed_colormap.rb#35
  def init_colormap; end

  # source://red-colors//lib/colors/listed_colormap.rb#41
  def make_reverse_colormap(name); end
end

# source://red-colors//lib/colors/named_colors.rb#2
module Colors::NamedColors
  class << self
    # source://red-colors//lib/colors/named_colors.rb#86
    def [](name); end

    # Return whether `name` is an item in the color cycle.
    #
    # @return [Boolean]
    #
    # source://red-colors//lib/colors/named_colors.rb#91
    def nth_color?(name); end
  end
end

# source://red-colors//lib/colors/named_colors.rb#74
Colors::NamedColors::MAPPING = T.let(T.unsafe(nil), Colors::NamedColors::Mapping)

# source://red-colors//lib/colors/named_colors.rb#3
class Colors::NamedColors::Mapping
  # @return [Mapping] a new instance of Mapping
  #
  # source://red-colors//lib/colors/named_colors.rb#4
  def initialize; end

  # source://red-colors//lib/colors/named_colors.rb#9
  def [](name); end

  # source://red-colors//lib/colors/named_colors.rb#55
  def []=(name, value); end

  # source://red-colors//lib/colors/named_colors.rb#61
  def delete(name); end

  # source://red-colors//lib/colors/named_colors.rb#67
  def update(other); end

  private

  # source://red-colors//lib/colors/named_colors.rb#17
  def lookup_no_color_cycle(name); end
end

# source://red-colors//lib/colors/rgb.rb#2
class Colors::RGB < ::Colors::AbstractColor
  include ::Colors::Helper

  # @return [RGB] a new instance of RGB
  #
  # source://red-colors//lib/colors/rgb.rb#25
  def initialize(r, g, b); end

  # source://red-colors//lib/colors/rgb.rb#57
  def ==(other); end

  # Returns the value of attribute b.
  #
  # source://red-colors//lib/colors/rgb.rb#29
  def b; end

  # source://red-colors//lib/colors/rgb.rb#45
  def b=(b); end

  # Returns the value of attribute b.
  #
  # source://red-colors//lib/colors/rgb.rb#29
  def blue; end

  # source://red-colors//lib/colors/rgb.rb#45
  def blue=(b); end

  # source://red-colors//lib/colors/rgb.rb#31
  def components; end

  # source://red-colors//lib/colors/rgb.rb#68
  def desaturate(factor); end

  # Returns the value of attribute g.
  #
  # source://red-colors//lib/colors/rgb.rb#29
  def g; end

  # source://red-colors//lib/colors/rgb.rb#41
  def g=(g); end

  # Returns the value of attribute g.
  #
  # source://red-colors//lib/colors/rgb.rb#29
  def green; end

  # source://red-colors//lib/colors/rgb.rb#41
  def green=(g); end

  # source://red-colors//lib/colors/rgb.rb#94
  def hsl_components; end

  # Returns the value of attribute r.
  #
  # source://red-colors//lib/colors/rgb.rb#29
  def r; end

  # source://red-colors//lib/colors/rgb.rb#37
  def r=(r); end

  # Returns the value of attribute r.
  #
  # source://red-colors//lib/colors/rgb.rb#29
  def red; end

  # source://red-colors//lib/colors/rgb.rb#37
  def red=(r); end

  # source://red-colors//lib/colors/rgb.rb#31
  def rgb_components; end

  # source://red-colors//lib/colors/rgb.rb#72
  def to_hex_string; end

  # source://red-colors//lib/colors/rgb.rb#85
  def to_hsl; end

  # source://red-colors//lib/colors/rgb.rb#89
  def to_hsla(alpha: T.unsafe(nil)); end

  # source://red-colors//lib/colors/rgb.rb#117
  def to_husl; end

  # source://red-colors//lib/colors/rgb.rb#76
  def to_rgb; end

  # source://red-colors//lib/colors/rgb.rb#80
  def to_rgba(alpha: T.unsafe(nil)); end

  # source://red-colors//lib/colors/rgb.rb#128
  def to_xterm256; end

  # source://red-colors//lib/colors/rgb.rb#124
  def to_xyz; end

  private

  # source://red-colors//lib/colors/rgb.rb#132
  def canonicalize(r, g, b); end

  # source://red-colors//lib/colors/rgb.rb#144
  def canonicalize_from_integer(r, g, b); end

  class << self
    # source://red-colors//lib/colors/rgb.rb#5
    def parse(hex_string); end
  end
end

# source://red-colors//lib/colors/rgba.rb#2
class Colors::RGBA < ::Colors::RGB
  include ::Colors::AlphaComponent

  # @return [RGBA] a new instance of RGBA
  #
  # source://red-colors//lib/colors/rgba.rb#30
  def initialize(r, g, b, a); end

  # source://red-colors//lib/colors/rgba.rb#40
  def ==(other); end

  # source://red-colors//lib/colors/rgba.rb#36
  def components; end

  # source://red-colors//lib/colors/rgba.rb#51
  def desaturate(factor); end

  # source://red-colors//lib/colors/rgba.rb#68
  def to_hsl; end

  # source://red-colors//lib/colors/rgba.rb#77
  def to_hsla; end

  # source://red-colors//lib/colors/rgba.rb#55
  def to_rgb; end

  # source://red-colors//lib/colors/rgba.rb#64
  def to_rgba; end

  private

  # source://red-colors//lib/colors/rgba.rb#81
  def canonicalize(r, g, b, a); end

  # source://red-colors//lib/colors/rgba.rb#94
  def canonicalize_from_integer(r, g, b, a); end

  class << self
    # source://red-colors//lib/colors/rgba.rb#3
    def parse(hex_string); end
  end
end

# source://red-colors//lib/colors/utils.rb#2
module Colors::Utils
  private

  # source://red-colors//lib/colors/utils.rb#3
  def linspace(x0, x1, n); end

  # source://red-colors//lib/colors/utils.rb#9
  def make_color(value); end

  class << self
    # source://red-colors//lib/colors/utils.rb#3
    def linspace(x0, x1, n); end

    # source://red-colors//lib/colors/utils.rb#9
    def make_color(value); end
  end
end

# ITU-R BT.709 D65 white point
# See https://en.wikipedia.org/wiki/Rec._709 for details
#
# source://red-colors//lib/colors.rb#28
Colors::WHITE_POINT_D65 = T.let(T.unsafe(nil), Colors::XYZ)

# source://red-colors//lib/colors/xyy.rb#2
class Colors::XYY < ::Colors::AbstractColor
  include ::Colors::Helper

  # @return [XYY] a new instance of XYY
  #
  # source://red-colors//lib/colors/xyy.rb#5
  def initialize(x, y, large_y); end

  # source://red-colors//lib/colors/xyy.rb#15
  def ==(other); end

  # source://red-colors//lib/colors/xyy.rb#11
  def components; end

  # Returns the value of attribute large_y.
  #
  # source://red-colors//lib/colors/xyy.rb#9
  def large_y; end

  # source://red-colors//lib/colors/xyy.rb#32
  def luv_components(wp); end

  # source://red-colors//lib/colors/xyy.rb#28
  def rgb_components; end

  # source://red-colors//lib/colors/xyy.rb#24
  def to_rgb; end

  # source://red-colors//lib/colors/xyy.rb#36
  def to_xyz; end

  # Returns the value of attribute x.
  #
  # source://red-colors//lib/colors/xyy.rb#9
  def x; end

  # Returns the value of attribute y.
  #
  # source://red-colors//lib/colors/xyy.rb#9
  def y; end

  private

  # source://red-colors//lib/colors/xyy.rb#40
  def canonicalize(x, y, large_y); end
end

# source://red-colors//lib/colors/xyz.rb#2
class Colors::XYZ < ::Colors::AbstractColor
  include ::Colors::Helper

  # @return [XYZ] a new instance of XYZ
  #
  # source://red-colors//lib/colors/xyz.rb#9
  def initialize(x, y, z); end

  # source://red-colors//lib/colors/xyz.rb#19
  def ==(other); end

  # source://red-colors//lib/colors/xyz.rb#15
  def components; end

  # source://red-colors//lib/colors/xyz.rb#36
  def luv_components(wp); end

  # source://red-colors//lib/colors/xyz.rb#32
  def rgb_components; end

  # source://red-colors//lib/colors/xyz.rb#28
  def to_rgb; end

  # source://red-colors//lib/colors/xyz.rb#54
  def uv_values; end

  # Returns the value of attribute x.
  #
  # source://red-colors//lib/colors/xyz.rb#13
  def x; end

  # Returns the value of attribute y.
  #
  # source://red-colors//lib/colors/xyz.rb#13
  def y; end

  # Returns the value of attribute z.
  #
  # source://red-colors//lib/colors/xyz.rb#13
  def z; end

  private

  # source://red-colors//lib/colors/xyz.rb#62
  def canonicalize(x, y, z); end
end

# source://red-colors//lib/colors/xyz.rb#5
Colors::XYZ::EPSILON = T.let(T.unsafe(nil), Rational)

# source://red-colors//lib/colors/xyz.rb#7
Colors::XYZ::KAPPA = T.let(T.unsafe(nil), Rational)

# source://red-colors//lib/colors/xterm256.rb#2
class Colors::Xterm256 < ::Colors::AbstractColor
  include ::Colors::Helper

  # @return [Xterm256] a new instance of Xterm256
  #
  # source://red-colors//lib/colors/xterm256.rb#5
  def initialize(code); end

  # source://red-colors//lib/colors/xterm256.rb#14
  def ==(other); end

  # Returns the value of attribute code.
  #
  # source://red-colors//lib/colors/xterm256.rb#12
  def code; end

  # source://red-colors//lib/colors/xterm256.rb#42
  def to_grey_level; end

  # source://red-colors//lib/colors/xterm256.rb#53
  def to_rgb; end

  # source://red-colors//lib/colors/xterm256.rb#23
  def to_rgb_components; end
end
