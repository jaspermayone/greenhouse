# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `console1984` gem.
# Please instead update this file by running `bin/tapioca gem console1984`.


# = Console 1984
#
# Console1984 is an IRB-based Rails console extension that does
# three things:
#
# * Record console sessions with their user, reason and commands.
# * Protect encrypted data by showing the ciphertexts when you visualize it.
# * Protect access to external systems that contain sensitive information (such as Redis
#   or Elasticsearch).
#
# == Session logging
#
# The console will record the session, its user and the commands entered. The logic to
# persist sessions is handled by the configured session logger, which is
# Console1984::SessionsLogger::Database by default.
#
# == Execution of commands
#
# The console will work in two modes:
#
# * Protected: It won't show encrypted information (it will show the ciphertexts instead)
#   and it won't allow connections to protected urls.
# * Unprotected: it allows access to encrypted information and protected urls. The commands
#   executed in this mode as flagged as sensitive.
#
# Console1984::CommandExecutor handles the execution of commands applying the corresponding
# protection mechanisms.Â´
#
# == Internal tampering prevention
#
# Finally, console1984 includes protection mechanisms against internal tampering while using
# the console. For example, to prevent the user from deleting audit trails. See
# Console1984::Shield and Console1984::CommandValidator to learn more.
#
# source://console1984//lib/console1984/engine.rb#3
module Console1984
  include ::Console1984::Messages

  # source://console1984//lib/console1984.rb#47
  def class_loader; end

  # source://console1984//lib/console1984.rb#47
  def class_loader=(val); end

  # source://console1984//lib/console1984.rb#45
  def config; end

  # source://console1984//lib/console1984.rb#43
  def supervisor; end

  # source://console1984//lib/console1984.rb#43
  def supervisor=(val); end

  class << self
    # source://console1984//lib/console1984.rb#51
    def ask_for_username_if_empty(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#51
    def base_record_class(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#47
    def class_loader; end

    # source://console1984//lib/console1984.rb#47
    def class_loader=(val); end

    # source://console1984//lib/console1984.rb#51
    def command_executor(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#45
    def config; end

    # source://console1984//lib/console1984.rb#51
    def debug(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#51
    def enter_protected_mode_warning(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#51
    def enter_unprotected_encryption_mode_warning(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#51
    def incinerate(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#51
    def incinerate_after(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#51
    def incineration_queue(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#51
    def production_data_warning(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#51
    def protected_environments(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#51
    def protected_urls(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#51
    def protections_config(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.1.3.4/lib/rails/engine.rb#412
    def railtie_helpers_paths; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#395
    def railtie_namespace; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#416
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # Returns whether the console is currently running in protected mode or not.
    #
    # @return [Boolean]
    #
    # source://console1984//lib/console1984.rb#55
    def running_protected_environment?; end

    # source://console1984//lib/console1984.rb#51
    def session_logger(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#51
    def shield(*_arg0, **_arg1, &_arg2); end

    # source://console1984//lib/console1984.rb#43
    def supervisor; end

    # source://console1984//lib/console1984.rb#43
    def supervisor=(val); end

    # source://railties/7.1.3.4/lib/rails/engine.rb#401
    def table_name_prefix; end

    # source://console1984//lib/console1984.rb#51
    def test_mode(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.1.3.4/lib/rails/engine.rb#408
    def use_relative_model_naming?; end

    # source://console1984//lib/console1984.rb#51
    def username_resolver(*_arg0, **_arg1, &_arg2); end
  end
end

# Supervise execution of console commands:
#
# * It will {validate commands}[rdoc-ref:Console1984::CommandValidator] before running
#   them.
# * It will execute the commands in {protected mode}[rdoc-ref:Console1984::Shield#with_protected_mode]
#   if needed.
# * It will log the command execution, and flag suspicious attempts and forbidden commands
#   appropriately.
#
# source://console1984//lib/console1984/command_executor.rb#9
class Console1984::CommandExecutor
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # Logs and validates +commands+, and executes the passed block in a protected environment.
  #
  # Suspicious commands will be executed but flagged as suspicious. Forbidden commands will
  # be prevented and flagged too.
  #
  # source://console1984//lib/console1984/command_executor.rb#19
  def execute(commands, &block); end

  # Executes the passed block in protected mode.
  #
  # See Console1984::Shield::Modes.
  #
  # source://console1984//lib/console1984/command_executor.rb#41
  def execute_in_protected_mode(&block); end

  # Returns whether the system is currently executing a user command.
  #
  # @return [Boolean]
  #
  # source://console1984//lib/console1984/command_executor.rb#64
  def executing_user_command?; end

  # @return [Boolean]
  #
  # source://console1984//lib/console1984/command_executor.rb#75
  def from_irb?(backtrace); end

  # Returns the value of attribute last_suspicious_command_error.
  #
  # source://console1984//lib/console1984/command_executor.rb#13
  def last_suspicious_command_error; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # Executes the passed block as the system.
  #
  # While the block is being executed, #executing_user_command? will return false.
  #
  # source://console1984//lib/console1984/command_executor.rb#59
  def run_as_system(&block); end

  # Executes the passed block as a user.
  #
  # While the block is being executed, #executing_user_command? will return true.
  # This method helps implementing certain protection mechanisms that should only act with
  # user commands.
  #
  # source://console1984//lib/console1984/command_executor.rb#52
  def run_as_user(&block); end

  # source://console1984//lib/console1984/command_executor.rb#12
  def session_logger(*_arg0, **_arg1, &_arg2); end

  # source://console1984//lib/console1984/command_executor.rb#12
  def shield(*_arg0, **_arg1, &_arg2); end

  # source://console1984//lib/console1984/command_executor.rb#12
  def username_resolver(*_arg0, **_arg1, &_arg2); end

  # Validates the command.
  #
  # See Console1984::CommandValidator.
  #
  # source://console1984//lib/console1984/command_executor.rb#71
  def validate_command(command); end

  private

  # source://console1984//lib/console1984/command_executor.rb#84
  def build_command_validator; end

  # source://console1984//lib/console1984/command_executor.rb#80
  def command_validator; end

  # source://console1984//lib/console1984/command_executor.rb#103
  def encrypting_error(error); end

  # source://console1984//lib/console1984/command_executor.rb#88
  def flag_suspicious(commands, error: T.unsafe(nil)); end

  # source://console1984//lib/console1984/command_executor.rb#95
  def run_command(run_by_user, &block); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# Validates console commands.
#
# This performs an static analysis of console commands. The analysis is meant to happen
# *before* commands are executed, so that they can prevent the execution if needed.
#
# The validation itself happens as a chain of validation objects. The system will invoke
# each validation in order. Validations will raise an error if the validation fails (typically
# a Console1984::Errors::ForbiddenCommandAttempted or Console1984::Errors::SuspiciousCommands).
#
# Internally, validations will receive a Console1984::CommandValidator::ParsedCommand object. This
# exposes parsed constructs in addition to the raw strings so that validations can use those.
#
# There is a convenience method .from_config that lets you instantiate a validation setup from
# a config hash (e.g to customize validations via YAML).
#
# See +config/command_protections.yml+ and the validations in +lib/console1984/command_validator+.
#
# source://console1984//lib/console1984/command_validator.rb#17
class Console1984::CommandValidator
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # @return [CommandValidator] a new instance of CommandValidator
  #
  # source://console1984//lib/console1984/command_validator.rb#20
  def initialize; end

  # Adds a +validation+ to the chain indexed by the provided +name+
  #
  # Validations are executed in the order they are added.
  #
  # source://console1984//lib/console1984/command_validator.rb#52
  def add_validation(name, validation); end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # Executes the chain of validations passing a {parsed command}[rdoc-ref:Console1984::CommandValidator::ParsedCommand]
  # created with the +command+ string passed by parameter.
  #
  # The validations are executed in the order they were added. If one validation raises an error, the error will
  # raise and the rest of validations won't get checked.
  #
  # source://console1984//lib/console1984/command_validator.rb#61
  def validate(command); end

  private

  # Returns the value of attribute validations_by_name.
  #
  # source://console1984//lib/console1984/command_validator.rb#70
  def validations_by_name; end

  class << self
    # Instantiates a command validator that will configure the validations based on the config passed.
    #
    # For each key in +config+, it will derive the class Console1984::CommandValidator::#{key.camelize}Validation
    # and will instantiate the validation passed the values as params.
    #
    # For example for this config:
    #
    #    { forbidden_reopening: [ActiveRecord, Console1984] }
    #
    # It will instantiate Console1984::CommandValidator::ForbiddenReopeningValidation passing
    # +["ActiveRecord", "Console1984"]+ in the constructor.
    #
    # # See +config/command_protections.yml+ as an example.
    #
    # source://console1984//lib/console1984/command_validator.rb#38
    def from_config(config); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# Validates references to a configured set of constants.
#
# source://console1984//lib/console1984/command_validator/forbidden_constant_reference_validation.rb#2
class Console1984::CommandValidator::ForbiddenConstantReferenceValidation
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # +config+ will be a hash like:
  #
  #    { always: [ Console1984 ], protected: [ PG, Mysql2 ] }
  #
  # @return [ForbiddenConstantReferenceValidation] a new instance of ForbiddenConstantReferenceValidation
  #
  # source://console1984//lib/console1984/command_validator/forbidden_constant_reference_validation.rb#8
  def initialize(shield = T.unsafe(nil), config); end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # Raises a Console1984::Errors::ForbiddenCommandAttempted if a banned constant is referenced.
  #
  # source://console1984//lib/console1984/command_validator/forbidden_constant_reference_validation.rb#18
  def validate(parsed_command); end

  private

  # @return [Boolean]
  #
  # source://console1984//lib/console1984/command_validator/forbidden_constant_reference_validation.rb#26
  def contains_invalid_const_reference?(parsed_command, banned_constants); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# Validates attempts to reopen classes and modules based on a configured set.
#
# source://console1984//lib/console1984/command_validator/forbidden_reopening_validation.rb#2
class Console1984::CommandValidator::ForbiddenReopeningValidation
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # @return [ForbiddenReopeningValidation] a new instance of ForbiddenReopeningValidation
  #
  # source://console1984//lib/console1984/command_validator/forbidden_reopening_validation.rb#7
  def initialize(banned_classes_or_modules); end

  # Returns the value of attribute banned_class_or_module_names.
  #
  # source://console1984//lib/console1984/command_validator/forbidden_reopening_validation.rb#5
  def banned_class_or_module_names; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # Raises a Console1984::Errors::ForbiddenCommandAttempted if an banned class or module reopening
  # is detected.
  #
  # source://console1984//lib/console1984/command_validator/forbidden_reopening_validation.rb#13
  def validate(parsed_command); end

  private

  # @return [Boolean]
  #
  # source://console1984//lib/console1984/command_validator/forbidden_reopening_validation.rb#24
  def banned?(class_or_module_name); end

  # @return [Boolean]
  #
  # source://console1984//lib/console1984/command_validator/forbidden_reopening_validation.rb#20
  def contains_invalid_class_or_module_declaration?(parsed_command); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# Parses a command string and exposes different constructs to be used by validations.
#
# Internally, it uses the {parser}[https://github.com/whitequark/parser] gem to perform the parsing.
#
# source://console1984//lib/console1984/command_validator/parsed_command.rb#4
class Console1984::CommandValidator::ParsedCommand
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # @return [ParsedCommand] a new instance of ParsedCommand
  #
  # source://console1984//lib/console1984/command_validator/parsed_command.rb#11
  def initialize(raw_command); end

  # source://console1984//lib/console1984/command_validator/parsed_command.rb#9
  def constant_assignments(*_arg0, **_arg1, &_arg2); end

  # source://console1984//lib/console1984/command_validator/parsed_command.rb#9
  def constants(*_arg0, **_arg1, &_arg2); end

  # source://console1984//lib/console1984/command_validator/parsed_command.rb#9
  def declared_classes_or_modules(*_arg0, **_arg1, &_arg2); end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # Returns the value of attribute raw_command.
  #
  # source://console1984//lib/console1984/command_validator/parsed_command.rb#7
  def raw_command; end

  private

  # source://console1984//lib/console1984/command_validator/parsed_command.rb#16
  def command_parser; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# Validates that the command doesn't include a term based on a configured list.
#
# source://console1984//lib/console1984/command_validator/suspicious_terms_validation.rb#2
class Console1984::CommandValidator::SuspiciousTermsValidation
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # @return [SuspiciousTermsValidation] a new instance of SuspiciousTermsValidation
  #
  # source://console1984//lib/console1984/command_validator/suspicious_terms_validation.rb#5
  def initialize(suspicious_terms); end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # Raises a Console1984::Errors::SuspiciousCommand if the term is referenced.
  #
  # source://console1984//lib/console1984/command_validator/suspicious_terms_validation.rb#10
  def validate(parsed_command); end

  private

  # @return [Boolean]
  #
  # source://console1984//lib/console1984/command_validator/suspicious_terms_validation.rb#17
  def contains_suspicious_term?(parsed_command); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984/commands/decrypt.rb#3
module Console1984::Commands; end

# source://console1984//lib/console1984/commands/decrypt.rb#4
class Console1984::Commands::Decrypt < ::IRB::Command::Base
  include ::Console1984::Freezeable
  include ::Console1984::Ext::Irb::Commands

  # source://console1984//lib/console1984/commands/decrypt.rb#10
  def execute(*_arg0); end
end

# source://console1984//lib/console1984/commands/encrypt.rb#4
class Console1984::Commands::Encrypt < ::IRB::Command::Base
  include ::Console1984::Freezeable
  include ::Console1984::Ext::Irb::Commands

  # source://console1984//lib/console1984/commands/encrypt.rb#10
  def execute(*_arg0); end
end

# Container for config options.
#
# These config options are accessible via first-level reader methods at Console1984.
#
# source://console1984//lib/console1984/config.rb#4
class Console1984::Config
  include ::Console1984::Messages
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # @return [Config] a new instance of Config
  #
  # source://console1984//lib/console1984/config.rb#21
  def initialize; end

  # source://console1984//lib/console1984/config.rb#19
  def ask_for_username_if_empty; end

  # source://console1984//lib/console1984/config.rb#19
  def ask_for_username_if_empty=(_arg0); end

  # source://console1984//lib/console1984/config.rb#19
  def base_record_class; end

  # source://console1984//lib/console1984/config.rb#19
  def base_record_class=(_arg0); end

  # source://console1984//lib/console1984/config.rb#19
  def command_executor; end

  # source://console1984//lib/console1984/config.rb#19
  def command_executor=(_arg0); end

  # source://console1984//lib/console1984/config.rb#19
  def debug; end

  # source://console1984//lib/console1984/config.rb#19
  def debug=(_arg0); end

  # source://console1984//lib/console1984/config.rb#19
  def enter_protected_mode_warning; end

  # source://console1984//lib/console1984/config.rb#19
  def enter_protected_mode_warning=(_arg0); end

  # source://console1984//lib/console1984/config.rb#19
  def enter_unprotected_encryption_mode_warning; end

  # source://console1984//lib/console1984/config.rb#19
  def enter_unprotected_encryption_mode_warning=(_arg0); end

  # source://console1984//lib/console1984/config.rb#36
  def freeze; end

  # source://console1984//lib/console1984/config.rb#19
  def incinerate; end

  # source://console1984//lib/console1984/config.rb#19
  def incinerate=(_arg0); end

  # source://console1984//lib/console1984/config.rb#19
  def incinerate_after; end

  # source://console1984//lib/console1984/config.rb#19
  def incinerate_after=(_arg0); end

  # source://console1984//lib/console1984/config.rb#19
  def incineration_queue; end

  # source://console1984//lib/console1984/config.rb#19
  def incineration_queue=(_arg0); end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # source://console1984//lib/console1984/config.rb#19
  def production_data_warning; end

  # source://console1984//lib/console1984/config.rb#19
  def production_data_warning=(_arg0); end

  # source://console1984//lib/console1984/config.rb#19
  def protected_environments; end

  # source://console1984//lib/console1984/config.rb#19
  def protected_environments=(_arg0); end

  # source://console1984//lib/console1984/config.rb#19
  def protected_urls; end

  # source://console1984//lib/console1984/config.rb#19
  def protected_urls=(_arg0); end

  # Initialize lazily so that it only gets instantiated during console sessions
  #
  # source://console1984//lib/console1984/config.rb#32
  def protections_config; end

  # source://console1984//lib/console1984/config.rb#19
  def protections_config=(_arg0); end

  # source://console1984//lib/console1984/config.rb#19
  def session_logger; end

  # source://console1984//lib/console1984/config.rb#19
  def session_logger=(_arg0); end

  # source://console1984//lib/console1984/config.rb#25
  def set_from(properties); end

  # source://console1984//lib/console1984/config.rb#19
  def shield; end

  # source://console1984//lib/console1984/config.rb#19
  def shield=(_arg0); end

  # source://console1984//lib/console1984/config.rb#19
  def test_mode; end

  # source://console1984//lib/console1984/config.rb#19
  def test_mode=(_arg0); end

  # source://console1984//lib/console1984/config.rb#19
  def username_resolver; end

  # source://console1984//lib/console1984/config.rb#19
  def username_resolver=(_arg0); end

  private

  # source://console1984//lib/console1984/config.rb#42
  def set_defaults; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984/config.rb#9
Console1984::Config::PROPERTIES = T.let(T.unsafe(nil), Array)

# source://console1984//lib/console1984/config.rb#7
Console1984::Config::PROTECTIONS_CONFIG_FILE_PATH = T.let(T.unsafe(nil), Pathname)

# source://console1984//lib/console1984/engine.rb#4
class Console1984::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://console1984//lib/console1984/errors.rb#2
module Console1984::Errors; end

# Attempt to execute a command that is not allowed. The system won't
# execute such commands and will flag them as sensitive.
#
# source://console1984//lib/console1984/errors.rb#13
class Console1984::Errors::ForbiddenCommandAttempted < ::StandardError; end

# A forbidden command was executed. The system will flag the command
# and exit.
#
# source://console1984//lib/console1984/errors.rb#21
class Console1984::Errors::ForbiddenCommandExecuted < ::StandardError; end

# Attempt to incinerate a session ahead of time as determined by
# +config.console1984.incinerate_after+.
#
# source://console1984//lib/console1984/errors.rb#25
class Console1984::Errors::ForbiddenIncineration < ::StandardError; end

# The console username is not set. Only raised when `config.ask_for_username_if_empty = false`.
#
# source://console1984//lib/console1984/errors.rb#28
class Console1984::Errors::MissingUsername < ::StandardError; end

# Attempt to access a protected url while in protected mode.
#
# source://console1984//lib/console1984/errors.rb#4
class Console1984::Errors::ProtectedConnection < ::StandardError
  # @return [ProtectedConnection] a new instance of ProtectedConnection
  #
  # source://console1984//lib/console1984/errors.rb#5
  def initialize(details); end
end

# A suspicious command was executed. The command will be flagged but the system
# will let it run.
#
# source://console1984//lib/console1984/errors.rb#17
class Console1984::Errors::SuspiciousCommandAttempted < ::StandardError; end

module Console1984::Ext; end
module Console1984::Ext::ActiveRecord; end

# Prevents accessing trail model tables when executing console commands.
#
# source://console1984//lib/console1984/ext/active_record/protected_auditable_tables.rb#2
module Console1984::Ext::ActiveRecord::ProtectedAuditableTables
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # source://console1984//lib/console1984/ext/active_record/protected_auditable_tables.rb#6
  def exec_delete(*args, **kwargs); end

  # source://console1984//lib/console1984/ext/active_record/protected_auditable_tables.rb#6
  def exec_insert(*args, **kwargs); end

  # source://console1984//lib/console1984/ext/active_record/protected_auditable_tables.rb#6
  def exec_insert_all(*args, **kwargs); end

  # source://console1984//lib/console1984/ext/active_record/protected_auditable_tables.rb#6
  def exec_query(*args, **kwargs); end

  # source://console1984//lib/console1984/ext/active_record/protected_auditable_tables.rb#6
  def exec_update(*args, **kwargs); end

  # source://console1984//lib/console1984/ext/active_record/protected_auditable_tables.rb#6
  def execute(*args, **kwargs); end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  private

  # source://console1984//lib/console1984/ext/active_record/protected_auditable_tables.rb#25
  def auditable_models; end

  # source://console1984//lib/console1984/ext/active_record/protected_auditable_tables.rb#21
  def auditable_tables; end

  # source://console1984//lib/console1984/ext/active_record/protected_auditable_tables.rb#17
  def auditable_tables_regexp; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

module Console1984::Ext::Core; end

# Extends +Module+ to prevent invoking class_eval in user commands.
#
# We don't use the built-in configurable system from protections.yml because we use
# class_eval ourselves to implement it!
#
# source://console1984//lib/console1984/ext/core/module.rb#5
module Console1984::Ext::Core::Module
  extend ::ActiveSupport::Concern

  # source://console1984//lib/console1984/ext/core/module.rb#8
  def instance_eval(*_arg0); end

  # source://console1984//lib/console1984/ext/core/module.rb#16
  def method_added(method); end

  private

  # @return [Boolean]
  #
  # source://console1984//lib/console1984/ext/core/module.rb#23
  def banned_for_reopening?; end

  # source://console1984//lib/console1984/ext/core/module.rb#29
  def classes_and_modules_banned_for_reopening; end
end

# Prevents loading forbidden classes dynamically.
#
# There are classes that we don't want to allow loading dynamically
# during a console session. For example, we don't want users to reference
# the constant +Console1984+. We will prevent a direct constant reference
# but users could still do:
#
#    MyConstant = ("Con" + "sole1984").constantize
#
# We prevent this by extending +Object#const_get+.
#
# source://console1984//lib/console1984/ext/core/object.rb#11
module Console1984::Ext::Core::Object
  include ::Console1984::Freezeable
  extend ::ActiveSupport::Concern
  extend ::Console1984::Freezeable::ClassMethods

  mixes_in_class_methods ::Console1984::Ext::Core::Object::ClassMethods

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  private

  # @return [Boolean]
  #
  # source://console1984//lib/console1984/ext/core/object.rb#40
  def banned_dynamic_constant_declaration?(arguments); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984/ext/core/object.rb#0
module Console1984::Ext::Core::Object::ClassMethods
  # source://console1984//lib/console1984/ext/core/object.rb#18
  def const_get(*arguments); end
end

# Prevents loading forbidden classes dynamically.
#
# See extension to +Console1984::Ext::Core::Object#const_get+.
#
# source://console1984//lib/console1984/ext/core/string.rb#4
module Console1984::Ext::Core::String
  include ::Console1984::Freezeable
  extend ::ActiveSupport::Concern
  extend ::Console1984::Freezeable::ClassMethods

  mixes_in_class_methods ::Console1984::Freezeable::ClassMethods

  # source://console1984//lib/console1984/ext/core/string.rb#10
  def constantize; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984/commands/decrypt.rb#0
module Console1984::Ext::Irb; end

# source://console1984//lib/console1984/ext/irb/commands.rb#1
module Console1984::Ext::Irb::Commands
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # Enter {unprotected mode}[rdoc-ref:Console1984::Shield::Modes] mode.
  #
  # source://console1984//lib/console1984/ext/irb/commands.rb#7
  def decrypt!; end

  # Enter {protected mode}[rdoc-ref:Console1984::Shield::Modes] mode.
  #
  # source://console1984//lib/console1984/ext/irb/commands.rb#12
  def encrypt!; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # source://console1984//lib/console1984/ext/irb/commands.rb#4
  def shield(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# Extends IRB execution contexts to hijack execution attempts and
# pass them through Console1984.
#
# source://console1984//lib/console1984/ext/irb/context.rb#3
module Console1984::Ext::Irb::Context
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # source://console1984//lib/console1984/ext/irb/context.rb#15
  def evaluate(line_or_statement, *_arg1, **_arg2, &_arg3); end

  # This method is invoked for showing returned objects in the console
  # Overridden to make sure their evaluation is supervised.
  #
  # source://console1984//lib/console1984/ext/irb/context.rb#8
  def inspect_last_value; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

module Console1984::Ext::Socket; end

# Wraps socket methods to execute supervised when {protected mode}[rdoc-ref:Console1984::Shield::Modes].
#
# source://console1984//lib/console1984/ext/socket/tcp_socket.rb#2
module Console1984::Ext::Socket::TcpSocket
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # source://console1984//lib/console1984/ext/socket/tcp_socket.rb#5
  def write(*_arg0, **_arg1, &_arg2); end

  # source://console1984//lib/console1984/ext/socket/tcp_socket.rb#11
  def write_nonblock(*_arg0, **_arg1, &_arg2); end

  private

  # source://console1984//lib/console1984/ext/socket/tcp_socket.rb#41
  def host_and_port_from(url); end

  # source://console1984//lib/console1984/ext/socket/tcp_socket.rb#53
  def host_and_port_from_invalid_uri(url); end

  # @return [Boolean]
  #
  # source://console1984//lib/console1984/ext/socket/tcp_socket.rb#26
  def protected?; end

  # source://console1984//lib/console1984/ext/socket/tcp_socket.rb#30
  def protected_addresses; end

  # source://console1984//lib/console1984/ext/socket/tcp_socket.rb#37
  def protected_urls; end

  # source://console1984//lib/console1984/ext/socket/tcp_socket.rb#18
  def protecting; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984/ext/socket/tcp_socket.rb#58
class Console1984::Ext::Socket::TcpSocket::ComparableAddress < ::Struct
  # @return [ComparableAddress] a new instance of ComparableAddress
  #
  # source://console1984//lib/console1984/ext/socket/tcp_socket.rb#59
  def initialize(addrinfo); end

  # Returns the value of attribute ip
  #
  # @return [Object] the current value of ip
  def ip; end

  # Sets the attribute ip
  #
  # @param value [Object] the value to set the attribute ip to.
  # @return [Object] the newly set value
  def ip=(_); end

  # Returns the value of attribute port
  #
  # @return [Object] the current value of port
  def port; end

  # Sets the attribute port
  #
  # @param value [Object] the value to set the attribute port to.
  # @return [Object] the newly set value
  def port=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Prevents adding new methods to classes, changing class-state or
# accessing/overridden instance variables via reflection. This is meant to
# prevent manipulating certain Console1984 classes during a console session.
#
# Notice this won't prevent every state-modification command. You should
# handle special cases by overriding +#freeze+ (if necessary) and invoking
# freezing on the instance when it makes sense.
#
# For example: check Console1984::Config#freeze and Console1984::Shield#freeze_all.
#
# The "freezing" doesn't materialize when the mixin is included. When mixed in, it
# will store the host class or module in a list. Then a call to Console1984::Freezeable.freeze_all
# will look through all the modules/classes freezing them. This way, we can control
# the moment where we stop classes from being modifiable at setup time.
#
# source://console1984//lib/console1984/freezeable.rb#15
module Console1984::Freezeable
  mixes_in_class_methods ::Console1984::Freezeable::ClassMethods

  # source://console1984//lib/console1984/freezeable.rb#16
  def to_freeze; end

  class << self
    # source://console1984//lib/console1984/freezeable.rb#48
    def freeze_all; end

    # Not using ActiveSupport::Concern because a bunch of classes skip its +.invoked+ hook which
    # is terrible for our purposes. This happened because it was being included in parent classes
    # (such as Object), so it was skipping the include block.
    #
    # source://console1984//lib/console1984/freezeable.rb#21
    def included(base); end

    # source://console1984//lib/console1984/freezeable.rb#16
    def to_freeze; end

    private

    # source://console1984//lib/console1984/freezeable.rb#55
    def class_and_modules_to_freeze; end

    # source://console1984//lib/console1984/freezeable.rb#59
    def freeze_class_or_module(class_or_module); end

    # source://console1984//lib/console1984/freezeable.rb#64
    def with_descendants(classes_and_modules); end
  end
end

# source://console1984//lib/console1984/freezeable.rb#30
module Console1984::Freezeable::ClassMethods
  # source://console1984//lib/console1984/freezeable.rb#33
  def prevent_instance_data_manipulation; end

  private

  # source://console1984//lib/console1984/freezeable.rb#40
  def prevent_sensitive_method(method_name); end
end

# source://console1984//lib/console1984/freezeable.rb#31
Console1984::Freezeable::ClassMethods::SENSITIVE_INSTANCE_METHODS = T.let(T.unsafe(nil), Array)

class Console1984::IncinerationJob < ::ActiveJob::Base
  def perform(session); end

  class << self
    # source://activejob/7.1.3.4/lib/active_job/queue_name.rb#55
    def queue_name; end

    # source://activesupport/7.1.3.4/lib/active_support/rescuable.rb#15
    def rescue_handlers; end

    def schedule(session); end
  end
end

# source://console1984//lib/console1984/input_output.rb#1
module Console1984::InputOutput
  include ::Console1984::Messages
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  private

  # source://console1984//lib/console1984/input_output.rb#14
  def ask_for_session_reason; end

  # source://console1984//lib/console1984/input_output.rb#32
  def ask_for_value(message); end

  # source://console1984//lib/console1984/input_output.rb#18
  def show_commands; end

  # source://console1984//lib/console1984/input_output.rb#10
  def show_production_data_warning; end

  # source://console1984//lib/console1984/input_output.rb#28
  def show_warning(message); end

  # source://console1984//lib/console1984/input_output.rb#5
  def show_welcome_message; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984/messages.rb#1
module Console1984::Messages; end

# source://console1984//lib/console1984/messages.rb#17
Console1984::Messages::COMMANDS = T.let(T.unsafe(nil), Hash)

# source://console1984//lib/console1984/messages.rb#13
Console1984::Messages::DEFAULT_ENTER_PROTECTED_MODE_WARNING = T.let(T.unsafe(nil), String)

# source://console1984//lib/console1984/messages.rb#7
Console1984::Messages::DEFAULT_ENTER_UNPROTECTED_ENCRYPTION_MODE_WARNING = T.let(T.unsafe(nil), String)

# source://console1984//lib/console1984/messages.rb#2
Console1984::Messages::DEFAULT_PRODUCTION_DATA_WARNING = T.let(T.unsafe(nil), String)

# source://console1984//lib/console1984/protections_config.rb#1
class Console1984::ProtectionsConfig
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # @return [ProtectionsConfig] a new instance of ProtectionsConfig
  #
  # source://console1984//lib/console1984/protections_config.rb#8
  def initialize(config); end

  # Returns the value of attribute config.
  #
  # source://console1984//lib/console1984/protections_config.rb#6
  def config; end

  # source://console1984//lib/console1984/protections_config.rb#13
  def forbidden_methods; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # source://console1984//lib/console1984/protections_config.rb#13
  def validations; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# Freezes classes to prevent tampering them
#
# source://console1984//lib/console1984/refrigerator.rb#2
class Console1984::Refrigerator
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # source://console1984//lib/console1984/refrigerator.rb#5
  def freeze_all; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  private

  # source://console1984//lib/console1984/refrigerator.rb#14
  def eager_load_all_classes; end

  # source://console1984//lib/console1984/refrigerator.rb#28
  def external_modules_and_classes_to_freeze; end

  # source://console1984//lib/console1984/refrigerator.rb#24
  def freeze_external_modules_and_classes; end

  # source://console1984//lib/console1984/refrigerator.rb#19
  def freeze_internal_instances; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984.rb#0
module Console1984::SessionsLogger; end

# A session logger that saves audit trails in the database.
#
# source://console1984//lib/console1984/sessions_logger/database.rb#2
class Console1984::SessionsLogger::Database
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # source://console1984//lib/console1984/sessions_logger/database.rb#36
  def after_executing(statements); end

  # source://console1984//lib/console1984/sessions_logger/database.rb#29
  def before_executing(statements); end

  # Returns the value of attribute current_sensitive_access.
  #
  # source://console1984//lib/console1984/sessions_logger/database.rb#5
  def current_sensitive_access; end

  # Returns the value of attribute current_session.
  #
  # source://console1984//lib/console1984/sessions_logger/database.rb#5
  def current_session; end

  # source://console1984//lib/console1984/sessions_logger/database.rb#25
  def end_sensitive_access; end

  # source://console1984//lib/console1984/sessions_logger/database.rb#14
  def finish_session; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # source://console1984//lib/console1984/sessions_logger/database.rb#19
  def start_sensitive_access(justification); end

  # source://console1984//lib/console1984/sessions_logger/database.rb#7
  def start_session(username, reason); end

  # source://console1984//lib/console1984/sessions_logger/database.rb#39
  def suspicious_commands_attempted(statements); end

  private

  # source://console1984//lib/console1984/sessions_logger/database.rb#63
  def ensure_connected(&block); end

  # source://console1984//lib/console1984/sessions_logger/database.rb#47
  def record_statements(statements); end

  # source://console1984//lib/console1984/sessions_logger/database.rb#51
  def silence_logging_and_ensure_connected(&block); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# The shield implements the protection mechanisms while using the console:
#
# * It extends different systems with console1984 extensions (including IRB itself).
# * It offers an API to the rest of the system to enable and disable protected modes and
#   execute code on the configured mode.
#
# Protection happens at two levels:
#
# * External: preventing users from accessing encrypted data or protected systems while on
#   protected mode.
# * Internal: preventing users from tampering Console 1984 itself.
#
# source://console1984//lib/console1984/shield.rb#12
class Console1984::Shield
  include ::Console1984::Messages
  include ::Console1984::Freezeable
  include ::Console1984::InputOutput
  include ::Console1984::Shield::Modes
  extend ::Console1984::Freezeable::ClassMethods

  # source://console1984//lib/console1984/shield.rb#16
  def command_executor(*_arg0, **_arg1, &_arg2); end

  # Installs the shield by extending several systems and freezing classes and modules
  # that aren't mean to be modified once the console is running.
  #
  # source://console1984//lib/console1984/shield.rb#20
  def install; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # source://console1984//lib/console1984/shield.rb#16
  def session_logger(*_arg0, **_arg1, &_arg2); end

  # source://console1984//lib/console1984/shield.rb#16
  def username_resolver(*_arg0, **_arg1, &_arg2); end

  private

  # source://console1984//lib/console1984/shield.rb#67
  def extend_active_record; end

  # source://console1984//lib/console1984/shield.rb#41
  def extend_core_ruby; end

  # source://console1984//lib/console1984/shield.rb#35
  def extend_irb; end

  # source://console1984//lib/console1984/shield.rb#28
  def extend_protected_systems; end

  # source://console1984//lib/console1984/shield.rb#47
  def extend_sockets; end

  # source://console1984//lib/console1984/shield.rb#76
  def prevent_invoking_protected_methods; end

  # source://console1984//lib/console1984/shield.rb#80
  def refrigerator; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984/shield.rb#65
Console1984::Shield::ACTIVE_RECORD_CONNECTION_ADAPTERS = T.let(T.unsafe(nil), Array)

# Prevents invoking a configurable set of methods
#
# source://console1984//lib/console1984/shield/method_invocation_shell.rb#2
class Console1984::Shield::MethodInvocationShell
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # @return [MethodInvocationShell] a new instance of MethodInvocationShell
  #
  # source://console1984//lib/console1984/shield/method_invocation_shell.rb#13
  def initialize(invocation); end

  # source://console1984//lib/console1984/shield/method_invocation_shell.rb#22
  def build_protection_module; end

  # Returns the value of attribute class_name.
  #
  # source://console1984//lib/console1984/shield/method_invocation_shell.rb#11
  def class_name; end

  # Returns the value of attribute methods.
  #
  # source://console1984//lib/console1984/shield/method_invocation_shell.rb#11
  def methods; end

  # Returns the value of attribute only_for_user_commands.
  #
  # source://console1984//lib/console1984/shield/method_invocation_shell.rb#11
  def only_for_user_commands; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # source://console1984//lib/console1984/shield/method_invocation_shell.rb#18
  def prevent_methods_invocation; end

  # source://console1984//lib/console1984/shield/method_invocation_shell.rb#35
  def protected_method_invocation_source_for(method); end

  # source://console1984//lib/console1984/shield/method_invocation_shell.rb#31
  def protected_method_invocations_source; end

  class << self
    # source://console1984//lib/console1984/shield/method_invocation_shell.rb#6
    def install_for(invocations); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# Console 1984 operates in two modes:
#
# * Protected: it won't reveal encrypted information, attempt to connect to protected urls will be prevented.
# * Unprotected: it will reveal encrypted information and let all connections go through.
#
# Tampering attempts (such as deleting audit trails) is prevented in both modes.
#
# source://console1984//lib/console1984/shield/modes.rb#7
module Console1984::Shield::Modes
  include ::Console1984::Messages
  include ::Console1984::Freezeable
  include ::Console1984::InputOutput
  extend ::Console1984::Freezeable::ClassMethods

  # Switch to unprotected mode
  #
  # Pass +silent: true+ to hide an informative message when switching to this mode.
  #
  # source://console1984//lib/console1984/shield/modes.rb#32
  def enable_protected_mode(silent: T.unsafe(nil)); end

  # Switch to protected mode
  #
  # Pass +silent: true+ to hide an informative message when switching to this mode.
  #
  # source://console1984//lib/console1984/shield/modes.rb#17
  def enable_unprotected_mode(silent: T.unsafe(nil)); end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # @return [Boolean]
  #
  # source://console1984//lib/console1984/shield/modes.rb#52
  def protected_mode?; end

  # @return [Boolean]
  #
  # source://console1984//lib/console1984/shield/modes.rb#48
  def unprotected_mode?; end

  # Executes the passed block in the configured mode (protected or unprotected).
  #
  # source://console1984//lib/console1984/shield/modes.rb#44
  def with_protected_mode(&block); end

  private

  # source://console1984//lib/console1984/shield/modes.rb#57
  def current_username; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984/shield/modes.rb#11
Console1984::Shield::Modes::PROTECTED_MODE = T.let(T.unsafe(nil), Console1984::Shield::Modes::Protected)

# An execution mode that protects encrypted information and connection to external systems.
#
# source://console1984//lib/console1984/shield/modes/protected.rb#2
class Console1984::Shield::Modes::Protected
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def currently_protected_urls; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def currently_protected_urls=(obj); end

  # source://console1984//lib/console1984/shield/modes/protected.rb#14
  def execute(&block); end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # source://console1984//lib/console1984/shield/modes/protected.rb#5
  def protected_urls(*_arg0, **_arg1, &_arg2); end

  private

  # source://console1984//lib/console1984/shield/modes/protected.rb#19
  def protecting(&block); end

  # source://console1984//lib/console1984/shield/modes/protected.rb#25
  def protecting_connections; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def currently_protected_urls; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def currently_protected_urls=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def currently_protected_urls_default_value; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984/shield/modes.rb#12
Console1984::Shield::Modes::UNPROTECTED_MODE = T.let(T.unsafe(nil), Console1984::Shield::Modes::Unprotected)

# An execution mode that doesn't protect encrypted information or external systems.
#
# source://console1984//lib/console1984/shield/modes/unprotected.rb#2
class Console1984::Shield::Modes::Unprotected
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # source://console1984//lib/console1984/shield/modes/unprotected.rb#5
  def execute(&block); end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984/shield.rb#84
module Console1984::Shield::SSLSocketRemoteAddress
  # Serve remote address as TCPSocket so that our extension works with both.
  #
  # source://console1984//lib/console1984/shield.rb#86
  def remote_address; end
end

# Entry point to the system. In charge of installing everything
# and starting and stopping sessions.
#
# source://console1984//lib/console1984/supervisor.rb#5
class Console1984::Supervisor
  include ::Console1984::Messages
  include ::Console1984::Freezeable
  include ::Console1984::InputOutput
  extend ::Console1984::Freezeable::ClassMethods

  # source://console1984//lib/console1984/supervisor.rb#38
  def current_username; end

  # source://console1984//lib/console1984/supervisor.rb#33
  def exit_irb; end

  # Installs the console protections.
  #
  # See Console1984::Shield
  #
  # source://console1984//lib/console1984/supervisor.rb#13
  def install; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  # source://console1984//lib/console1984/supervisor.rb#8
  def session_logger(*_arg0, **_arg1, &_arg2); end

  # source://console1984//lib/console1984/supervisor.rb#8
  def shield(*_arg0, **_arg1, &_arg2); end

  # Starts a console session.
  #
  # This will enable protected mode and log the new session in the configured
  # {session logger}[rdoc-ref:Console1984::SessionsLogger::Database].
  #
  # source://console1984//lib/console1984/supervisor.rb#22
  def start; end

  # Stops a console session
  #
  # source://console1984//lib/console1984/supervisor.rb#29
  def stop; end

  # source://console1984//lib/console1984/supervisor.rb#8
  def username_resolver(*_arg0, **_arg1, &_arg2); end

  private

  # source://console1984//lib/console1984/supervisor.rb#68
  def handle_empty_username; end

  # source://console1984//lib/console1984/supervisor.rb#43
  def require_dependencies; end

  # source://console1984//lib/console1984/supervisor.rb#60
  def start_session; end

  # source://console1984//lib/console1984/supervisor.rb#64
  def stop_session; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984.rb#0
module Console1984::Username; end

# A username resolver that returns the value of a given
# environment variable.
#
# source://console1984//lib/console1984/username/env_resolver.rb#3
class Console1984::Username::EnvResolver
  include ::Console1984::Freezeable
  extend ::Console1984::Freezeable::ClassMethods

  # @return [EnvResolver] a new instance of EnvResolver
  #
  # source://console1984//lib/console1984/username/env_resolver.rb#6
  def initialize(key); end

  # source://console1984//lib/console1984/username/env_resolver.rb#10
  def current; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def prevent_instance_data_manipulation_after_freezing; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def prevent_instance_data_manipulation_after_freezing=(obj); end

  private

  # source://console1984//lib/console1984/username/env_resolver.rb#15
  def username; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#59
    def prevent_instance_data_manipulation_after_freezing; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def prevent_instance_data_manipulation_after_freezing=(obj); end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
    def prevent_instance_data_manipulation_after_freezing_default_value; end
  end
end

# source://console1984//lib/console1984/version.rb#2
Console1984::VERSION = T.let(T.unsafe(nil), String)
