# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `debugbar` gem.
# Please instead update this file by running `bin/tapioca gem debugbar`.


# This middleware silences the Rails logger for requests to the Debugbar routes.
# The poll route can be *very* noisy.
# Rails already does this for the /assets route, see Sprockets::Rails::QuietAssets.
#
# @see Sprockets::Rails::QuietAssets
# @see Rails::Rack::Logger#silence
#
# source://debugbar//lib/debugbar.rb#3
module Debugbar
  include ::Debugbar::Tracker

  class << self
    # source://debugbar//lib/debugbar.rb#64
    def config; end

    # @yield [config]
    #
    # source://debugbar//lib/debugbar.rb#68
    def configure; end

    # source://debugbar//lib/debugbar.rb#72
    def connect!; end

    # @return [Boolean]
    #
    # source://debugbar//lib/debugbar.rb#80
    def connected?; end

    # source://debugbar//lib/debugbar.rb#76
    def disconnect!; end

    # source://debugbar//lib/debugbar.rb#84
    def msg(msg, *extra); end

    # source://railties/7.1.3.4/lib/rails/engine.rb#412
    def railtie_helpers_paths; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#395
    def railtie_namespace; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#416
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://railties/7.1.3.4/lib/rails/engine.rb#401
    def table_name_prefix; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#408
    def use_relative_model_naming?; end
  end
end

# source://debugbar//lib/debugbar/subscribers/action_controller.rb#2
class Debugbar::ActionControllerEventSubscriber
  class << self
    # source://debugbar//lib/debugbar/subscribers/action_controller.rb#10
    def process_action(event); end

    # source://debugbar//lib/debugbar/subscribers/action_controller.rb#4
    def start_processing(event); end
  end
end

# source://debugbar//lib/debugbar/subscribers/active_job.rb#4
class Debugbar::ActiveJobEventSubscriber
  # source://debugbar//lib/debugbar/subscribers/active_job.rb#5
  def backtrace_cleaner; end

  # source://debugbar//lib/debugbar/subscribers/active_job.rb#5
  def backtrace_cleaner=(_arg0); end

  # source://debugbar//lib/debugbar/subscribers/active_job.rb#5
  def backtrace_cleaner?; end

  class << self
    # source://debugbar//lib/debugbar/subscribers/active_job.rb#5
    def backtrace_cleaner; end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#5
    def backtrace_cleaner=(value); end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#5
    def backtrace_cleaner?; end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#8
    def enqueue(event); end

    # subscribe_log_level :enqueue, :info # ???
    #
    # source://debugbar//lib/debugbar/subscribers/active_job.rb#36
    def enqueue_at(event); end

    private

    # See ActiveJob.adapter_name for orignal implementation. This is redefined here
    # to be compatible with the older Rails version.
    #
    # source://debugbar//lib/debugbar/subscribers/active_job.rb#95
    def adapter_name(adapter); end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#106
    def args_info(job); end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#160
    def enqueued_jobs_message(adapter, enqueued_jobs); end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#144
    def error(progname = T.unsafe(nil), &block); end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#156
    def extract_enqueue_source_location(locations); end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#115
    def format(arg); end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#136
    def info(progname = T.unsafe(nil), &block); end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#152
    def log_enqueue_source; end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#132
    def logger; end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#102
    def queue_name(event); end

    # source://debugbar//lib/debugbar/subscribers/active_job.rb#128
    def scheduled_at(job); end
  end
end

# source://debugbar//lib/debugbar/subscribers/active_record.rb#4
class Debugbar::ActiveRecordEventSubscriber
  # source://debugbar//lib/debugbar/subscribers/active_record.rb#5
  def backtrace_cleaner; end

  # source://debugbar//lib/debugbar/subscribers/active_record.rb#5
  def backtrace_cleaner=(_arg0); end

  # source://debugbar//lib/debugbar/subscribers/active_record.rb#5
  def backtrace_cleaner?; end

  class << self
    # source://debugbar//lib/debugbar/subscribers/active_record.rb#5
    def backtrace_cleaner; end

    # source://debugbar//lib/debugbar/subscribers/active_record.rb#5
    def backtrace_cleaner=(value); end

    # source://debugbar//lib/debugbar/subscribers/active_record.rb#5
    def backtrace_cleaner?; end

    # source://debugbar//lib/debugbar/subscribers/active_record.rb#43
    def query_source_location; end

    # source://debugbar//lib/debugbar/subscribers/active_record.rb#8
    def sql(event); end
  end
end

# source://debugbar//lib/debugbar/subscribers/active_support.rb#2
class Debugbar::ActiveSupportEventSubscriber
  class << self
    # source://debugbar//lib/debugbar/subscribers/active_support.rb#4
    def cache(event); end
  end
end

class Debugbar::ApplicationController < ::ActionController::Base
  private

  # source://actionview/7.1.3.4/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end

  class << self
    # source://actionpack/7.1.3.4/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

class Debugbar::ApplicationRecord < ::ActiveRecord::Base
  include ::Debugbar::ApplicationRecord::GeneratedAttributeMethods
  include ::Debugbar::ApplicationRecord::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.1.3.4/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.1.3.4/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

module Debugbar::ApplicationRecord::GeneratedAssociationMethods; end
module Debugbar::ApplicationRecord::GeneratedAttributeMethods; end

class Debugbar::AssetsController < ::Debugbar::ApplicationController
  def js; end

  private

  # source://actionview/7.1.3.4/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end
  def verify_same_origin_request; end

  class << self
    # source://actionpack/7.1.3.4/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

# source://debugbar//lib/debugbar/config.rb#2
class Debugbar::Config
  # @return [Config] a new instance of Config
  #
  # source://debugbar//lib/debugbar/config.rb#9
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute action_controller.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def action_controller; end

  # Sets the attribute action_controller
  #
  # @param value the value to set the attribute action_controller to.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def action_controller=(_arg0); end

  # source://debugbar//lib/debugbar/config.rb#45
  def action_controller?; end

  # Returns the value of attribute active_job.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def active_job; end

  # Sets the attribute active_job
  #
  # @param value the value to set the attribute active_job to.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def active_job=(_arg0); end

  # source://debugbar//lib/debugbar/config.rb#45
  def active_job?; end

  # Returns the value of attribute active_record.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def active_record; end

  # Sets the attribute active_record
  #
  # @param value the value to set the attribute active_record to.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def active_record=(_arg0); end

  # source://debugbar//lib/debugbar/config.rb#45
  def active_record?; end

  # Returns the value of attribute buffer_adapter.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def buffer_adapter; end

  # Sets the attribute buffer_adapter
  #
  # @param value the value to set the attribute buffer_adapter to.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def buffer_adapter=(_arg0); end

  # source://debugbar//lib/debugbar/config.rb#20
  def defaults; end

  # Returns the value of attribute enabled.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def enabled; end

  # Sets the attribute enabled
  #
  # @param value the value to set the attribute enabled to.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def enabled=(_arg0); end

  # Returns the value of attribute enabled.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def enabled?; end

  # Returns the value of attribute ignore_request.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def ignore_request; end

  # Sets the attribute ignore_request
  #
  # @param value the value to set the attribute ignore_request to.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def ignore_request=(_arg0); end

  # @return [Boolean]
  #
  # source://debugbar//lib/debugbar/config.rb#32
  def ignore_request?(env); end

  # Returns the value of attribute min_log_level.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def min_log_level; end

  # Sets the attribute min_log_level
  #
  # @param value the value to set the attribute min_log_level to.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def min_log_level=(_arg0); end

  # Returns the value of attribute prefix.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def prefix; end

  # Sets the attribute prefix
  #
  # @param value the value to set the attribute prefix to.
  #
  # source://debugbar//lib/debugbar/config.rb#3
  def prefix=(_arg0); end

  # @return [Boolean]
  #
  # source://debugbar//lib/debugbar/config.rb#40
  def use_logger?; end
end

# source://debugbar//lib/debugbar/current.rb#4
class Debugbar::Current < ::ActiveSupport::CurrentAttributes
  # source://activesupport/7.1.3.4/lib/active_support/current_attributes.rb#110
  def ignore?; end

  # source://debugbar//lib/debugbar/current.rb#10
  def new_request!(request_id); end

  # source://debugbar//lib/debugbar/current.rb#14
  def pop_request!; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/current_attributes.rb#127
    def ignore; end

    # source://activesupport/7.1.3.4/lib/active_support/current_attributes.rb#127
    def ignore=(value); end

    # source://activesupport/7.1.3.4/lib/active_support/current_attributes.rb#127
    def request; end

    # source://activesupport/7.1.3.4/lib/active_support/current_attributes.rb#127
    def request=(value); end
  end
end

class Debugbar::DebugbarChannel < ::ActionCable::Channel::Base
  def receive(data); end
  def subscribed; end
  def unsubscribed; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://debugbar//lib/debugbar/engine.rb#7
class Debugbar::Engine < ::Rails::Engine
  # source://debugbar//lib/debugbar/engine.rb#83
  def subscribe(config); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://debugbar//lib/debugbar/buffers/memory_buffer.rb#2
class Debugbar::MemoryBuffer
  # @return [MemoryBuffer] a new instance of MemoryBuffer
  #
  # source://debugbar//lib/debugbar/buffers/memory_buffer.rb#3
  def initialize; end

  # source://debugbar//lib/debugbar/buffers/memory_buffer.rb#20
  def all; end

  # source://debugbar//lib/debugbar/buffers/memory_buffer.rb#29
  def clear!; end

  # source://debugbar//lib/debugbar/buffers/memory_buffer.rb#24
  def each(&block); end

  # source://debugbar//lib/debugbar/buffers/memory_buffer.rb#7
  def push(request); end

  # source://debugbar//lib/debugbar/buffers/memory_buffer.rb#12
  def remove(ids); end
end

class Debugbar::PollingController < ::Debugbar::ApplicationController
  def confirm; end
  def poll; end

  private

  # source://actionview/7.1.3.4/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end
  def cors_set_access_control_headers; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionpack/7.1.3.4/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

# source://debugbar//lib/debugbar/middlewares/quiet_routes.rb#9
class Debugbar::QuietRoutes
  # @return [QuietRoutes] a new instance of QuietRoutes
  #
  # source://debugbar//lib/debugbar/middlewares/quiet_routes.rb#10
  def initialize(app); end

  # source://debugbar//lib/debugbar/middlewares/quiet_routes.rb#15
  def call(env); end
end

# source://debugbar//lib/debugbar/request.rb#2
class Debugbar::Request
  # @return [Request] a new instance of Request
  #
  # source://debugbar//lib/debugbar/request.rb#8
  def initialize(request_id); end

  # source://debugbar//lib/debugbar/request.rb#47
  def add_cache(c); end

  # source://debugbar//lib/debugbar/request.rb#39
  def add_job(job); end

  # source://debugbar//lib/debugbar/request.rb#51
  def add_log(l); end

  # source://debugbar//lib/debugbar/request.rb#43
  def add_msg(msg, extra, source); end

  # source://debugbar//lib/debugbar/request.rb#35
  def add_query(query); end

  # Returns the value of attribute cache.
  #
  # source://debugbar//lib/debugbar/request.rb#3
  def cache; end

  # Returns the value of attribute headers.
  #
  # source://debugbar//lib/debugbar/request.rb#6
  def headers; end

  # Sets the attribute headers
  #
  # @param value the value to set the attribute headers to.
  #
  # source://debugbar//lib/debugbar/request.rb#6
  def headers=(_arg0); end

  # Returns the value of attribute request_id.
  #
  # source://debugbar//lib/debugbar/request.rb#3
  def id; end

  # source://debugbar//lib/debugbar/request.rb#27
  def inc_model(name); end

  # Returns the value of attribute jobs.
  #
  # source://debugbar//lib/debugbar/request.rb#3
  def jobs; end

  # Returns the value of attribute logs.
  #
  # source://debugbar//lib/debugbar/request.rb#3
  def logs; end

  # Returns the value of attribute messages.
  #
  # source://debugbar//lib/debugbar/request.rb#3
  def messages; end

  # Returns the value of attribute meta.
  #
  # source://debugbar//lib/debugbar/request.rb#3
  def meta; end

  # source://debugbar//lib/debugbar/request.rb#20
  def meta=(meta); end

  # Returns the value of attribute models.
  #
  # source://debugbar//lib/debugbar/request.rb#3
  def models; end

  # Returns the value of attribute queries.
  #
  # source://debugbar//lib/debugbar/request.rb#3
  def queries; end

  # Returns the value of attribute request.
  #
  # source://debugbar//lib/debugbar/request.rb#6
  def request; end

  # Sets the attribute request
  #
  # @param value the value to set the attribute request to.
  #
  # source://debugbar//lib/debugbar/request.rb#6
  def request=(_arg0); end

  # Returns the value of attribute request_id.
  #
  # source://debugbar//lib/debugbar/request.rb#3
  def request_id; end

  # Returns the value of attribute response.
  #
  # source://debugbar//lib/debugbar/request.rb#6
  def response; end

  # Sets the attribute response
  #
  # @param value the value to set the attribute response to.
  #
  # source://debugbar//lib/debugbar/request.rb#6
  def response=(_arg0); end

  # source://debugbar//lib/debugbar/request.rb#55
  def to_h; end

  # source://debugbar//lib/debugbar/request.rb#70
  def to_json; end

  private

  # source://debugbar//lib/debugbar/request.rb#76
  def request_hash; end

  # source://debugbar//lib/debugbar/request.rb#88
  def response_hash; end
end

# source://debugbar//lib/debugbar/buffers/request_buffer.rb#2
class Debugbar::RequestBuffer
  class << self
    # source://debugbar//lib/debugbar/buffers/request_buffer.rb#9
    def all(*args, &block); end

    # source://debugbar//lib/debugbar/buffers/request_buffer.rb#9
    def clear!(*args, &block); end

    # source://debugbar//lib/debugbar/buffers/request_buffer.rb#9
    def each(*args, &block); end

    # source://debugbar//lib/debugbar/buffers/request_buffer.rb#4
    def init(adapter); end

    # source://debugbar//lib/debugbar/buffers/request_buffer.rb#9
    def push(*args, &block); end

    # source://debugbar//lib/debugbar/buffers/request_buffer.rb#9
    def remove(*args, &block); end
  end
end

# source://debugbar//lib/debugbar/loggers/simple_logger.rb#2
class Debugbar::SimpleLogger < ::Logger
  # @return [SimpleLogger] a new instance of SimpleLogger
  #
  # source://debugbar//lib/debugbar/loggers/simple_logger.rb#3
  def initialize(min_level = T.unsafe(nil)); end

  # source://debugbar//lib/debugbar/loggers/simple_logger.rb#7
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end
end

# source://debugbar//lib/debugbar.rb#10
Debugbar::TIME_FORMAT = T.let(T.unsafe(nil), String)

module Debugbar::TagHelpers
  def debugbar_body(opt = T.unsafe(nil)); end
  def debugbar_head; end
  def debugbar_javascript(opt = T.unsafe(nil)); end

  private

  def db_adapter; end
end

# source://debugbar//lib/debugbar/middlewares/track_current_request.rb#2
class Debugbar::TrackCurrentRequest
  # @return [TrackCurrentRequest] a new instance of TrackCurrentRequest
  #
  # source://debugbar//lib/debugbar/middlewares/track_current_request.rb#3
  def initialize(app); end

  # source://debugbar//lib/debugbar/middlewares/track_current_request.rb#7
  def call(env); end
end

# source://debugbar//lib/debugbar.rb#12
module Debugbar::Tracker
  class << self
    # source://debugbar//lib/debugbar.rb#35
    def add_cache(*args, &block); end

    # source://debugbar//lib/debugbar.rb#35
    def add_job(*args, &block); end

    # source://debugbar//lib/debugbar.rb#35
    def add_log(*args, &block); end

    # source://debugbar//lib/debugbar.rb#35
    def add_query(*args, &block); end

    # source://debugbar//lib/debugbar.rb#18
    def headers=(val); end

    # source://debugbar//lib/debugbar.rb#35
    def inc_model(*args, &block); end

    # source://debugbar//lib/debugbar.rb#18
    def meta=(val); end

    # source://debugbar//lib/debugbar.rb#50
    def msg(msg, extra, source); end

    # source://debugbar//lib/debugbar.rb#18
    def request=(val); end

    # source://debugbar//lib/debugbar.rb#18
    def response=(val); end
  end
end

# source://debugbar//lib/debugbar/version.rb#4
Debugbar::VERSION = T.let(T.unsafe(nil), String)
