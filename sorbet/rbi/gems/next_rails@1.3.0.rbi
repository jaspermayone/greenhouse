# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `next_rails` gem.
# Please instead update this file by running `bin/tapioca gem next_rails`.


# A shitlist for deprecation warnings during test runs. It has two modes: "save" and "compare"
#
# DEPRECATION_TRACKER=save
# Record deprecation warnings, grouped by spec file. After the test run, save to a file.
#
# DEPRECATION_TRACKER=compare
# Tracks deprecation warnings, grouped by spec file. After the test run, compare against shitlist of expected
# deprecation warnings. If anything is added or removed, raise an error with a diff of the changes.
#
# source://next_rails//lib/deprecation_tracker.rb#13
class DeprecationTracker
  # @return [DeprecationTracker] a new instance of DeprecationTracker
  #
  # source://next_rails//lib/deprecation_tracker.rb#116
  def initialize(shitlist_path, transform_message = T.unsafe(nil), mode = T.unsafe(nil)); end

  # source://next_rails//lib/deprecation_tracker.rb#123
  def add(message); end

  # source://next_rails//lib/deprecation_tracker.rb#134
  def after_run; end

  # Returns the value of attribute bucket.
  #
  # source://next_rails//lib/deprecation_tracker.rb#114
  def bucket; end

  # source://next_rails//lib/deprecation_tracker.rb#129
  def bucket=(value); end

  # source://next_rails//lib/deprecation_tracker.rb#142
  def compare; end

  # source://next_rails//lib/deprecation_tracker.rb#190
  def create_if_shitlist_path_does_not_exist; end

  # source://next_rails//lib/deprecation_tracker.rb#197
  def create_temp_shitlist; end

  # Returns the value of attribute deprecation_messages.
  #
  # source://next_rails//lib/deprecation_tracker.rb#114
  def deprecation_messages; end

  # source://next_rails//lib/deprecation_tracker.rb#175
  def diff; end

  # Returns the value of attribute mode.
  #
  # source://next_rails//lib/deprecation_tracker.rb#114
  def mode; end

  # Normalize deprecation messages to reduce noise from file output and test files to be tracked with separate test runs
  #
  # source://next_rails//lib/deprecation_tracker.rb#206
  def normalized_deprecation_messages; end

  # source://next_rails//lib/deprecation_tracker.rb#219
  def read_shitlist; end

  # source://next_rails//lib/deprecation_tracker.rb#182
  def save; end

  # Returns the value of attribute shitlist_path.
  #
  # source://next_rails//lib/deprecation_tracker.rb#114
  def shitlist_path; end

  # Returns the value of attribute transform_message.
  #
  # source://next_rails//lib/deprecation_tracker.rb#114
  def transform_message; end

  class << self
    # source://next_rails//lib/deprecation_tracker.rb#71
    def init_tracker(opts = T.unsafe(nil)); end

    # source://next_rails//lib/deprecation_tracker.rb#104
    def track_minitest(opts = T.unsafe(nil)); end

    # source://next_rails//lib/deprecation_tracker.rb#86
    def track_rspec(rspec_config, opts = T.unsafe(nil)); end
  end
end

# source://next_rails//lib/deprecation_tracker.rb#16
module DeprecationTracker::KernelWarnTracker
  # source://next_rails//lib/deprecation_tracker.rb#21
  def warn(*messages, uplevel: T.unsafe(nil), category: T.unsafe(nil)); end

  class << self
    # source://next_rails//lib/deprecation_tracker.rb#17
    def callbacks; end
  end
end

# source://next_rails//lib/deprecation_tracker.rb#36
module DeprecationTracker::MinitestExtension
  class << self
    # source://next_rails//lib/deprecation_tracker.rb#37
    def new(deprecation_tracker); end
  end
end

# source://next_rails//lib/deprecation_tracker.rb#14
class DeprecationTracker::UnexpectedDeprecations < ::StandardError; end

module Kernel; end

# source://next_rails//lib/next_rails/gem_info.rb#1
module NextRails
  class << self
    # This method will check your environment
    # (e.g. `ENV['BUNDLE_GEMFILE]`) to determine whether your application is
    # running with the next set of dependencies or the current set of dependencies.
    #
    # @return [Boolean]
    #
    # source://next_rails//lib/next_rails.rb#16
    def next?; end

    # This method will reset the @@next_bundle_gemfile variable. Then next time
    # you call `NextRails.next?` it will check the environment once again.
    #
    # source://next_rails//lib/next_rails.rb#24
    def reset_next_bundle_gemfile; end
  end
end

# source://next_rails//lib/next_rails/bundle_report.rb#8
module NextRails::BundleReport
  extend ::NextRails::BundleReport

  # source://next_rails//lib/next_rails/bundle_report.rb#130
  def build_json(out_of_date_gems, total_gem_count, sourced_from_git_count); end

  # source://next_rails//lib/next_rails/bundle_report.rb#11
  def compatibility(rails_version: T.unsafe(nil), include_rails_gems: T.unsafe(nil)); end

  # source://next_rails//lib/next_rails/bundle_report.rb#74
  def compatible_ruby_version(rails_version); end

  # source://next_rails//lib/next_rails/bundle_report.rb#23
  def erb_output(incompatible_gems_by_state, incompatible_gems, rails_version); end

  # source://next_rails//lib/next_rails/bundle_report.rb#68
  def gem_header(_gem); end

  # source://next_rails//lib/next_rails/bundle_report.rb#113
  def outdated(format = T.unsafe(nil)); end

  # source://next_rails//lib/next_rails/bundle_report.rb#125
  def output_to_json(out_of_date_gems, total_gem_count, sourced_from_git_count); end

  # source://next_rails//lib/next_rails/bundle_report.rb#152
  def output_to_stdout(out_of_date_gems, total_gem_count, sourced_from_git_count); end
end

# source://next_rails//lib/next_rails/gem_info.rb#2
class NextRails::GemInfo
  # @return [GemInfo] a new instance of GemInfo
  #
  # source://next_rails//lib/next_rails/gem_info.rb#55
  def initialize(gem_specification); end

  # source://next_rails//lib/next_rails/gem_info.rb#61
  def age; end

  # @return [Boolean]
  #
  # source://next_rails//lib/next_rails/gem_info.rb#102
  def compatible_with_rails?(rails_version: T.unsafe(nil)); end

  # source://next_rails//lib/next_rails/gem_info.rb#69
  def created_at; end

  # source://next_rails//lib/next_rails/gem_info.rb#110
  def find_latest_compatible(rails_version: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://next_rails//lib/next_rails/gem_info.rb#77
  def from_rails?; end

  # Returns the value of attribute gem_specification.
  #
  # source://next_rails//lib/next_rails/gem_info.rb#53
  def gem_specification; end

  # Returns the value of attribute latest_compatible_version.
  #
  # source://next_rails//lib/next_rails/gem_info.rb#53
  def latest_compatible_version; end

  # source://next_rails//lib/next_rails/gem_info.rb#93
  def latest_version; end

  # Returns the value of attribute name.
  #
  # source://next_rails//lib/next_rails/gem_info.rb#53
  def name; end

  # @return [Boolean]
  #
  # source://next_rails//lib/next_rails/gem_info.rb#65
  def sourced_from_git?; end

  # @return [Boolean]
  #
  # source://next_rails//lib/next_rails/gem_info.rb#143
  def spec_compatible_with_rails?(specification: T.unsafe(nil), rails_version: T.unsafe(nil)); end

  # source://next_rails//lib/next_rails/gem_info.rb#81
  def state(rails_version); end

  # source://next_rails//lib/next_rails/gem_info.rb#106
  def unsatisfied_rails_dependencies(rails_version: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://next_rails//lib/next_rails/gem_info.rb#73
  def up_to_date?; end

  # Returns the value of attribute version.
  #
  # source://next_rails//lib/next_rails/gem_info.rb#53
  def version; end

  class << self
    # source://next_rails//lib/next_rails/gem_info.rb#47
    def all; end
  end
end

# source://next_rails//lib/next_rails/gem_info.rb#3
class NextRails::GemInfo::NullGemInfo < ::NextRails::GemInfo
  # @return [NullGemInfo] a new instance of NullGemInfo
  #
  # source://next_rails//lib/next_rails/gem_info.rb#4
  def initialize; end

  # source://next_rails//lib/next_rails/gem_info.rb#6
  def age; end

  # source://next_rails//lib/next_rails/gem_info.rb#10
  def created_at; end

  # source://next_rails//lib/next_rails/gem_info.rb#26
  def state(_); end

  # source://next_rails//lib/next_rails/gem_info.rb#22
  def unsatisfied_rails_dependencies(*_arg0); end

  # @return [Boolean]
  #
  # source://next_rails//lib/next_rails/gem_info.rb#14
  def up_to_date?; end

  # source://next_rails//lib/next_rails/gem_info.rb#18
  def version; end
end

# source://next_rails//lib/next_rails/gem_info.rb#31
NextRails::GemInfo::RAILS_GEMS = T.let(T.unsafe(nil), Array)

# source://next_rails//lib/next_rails/version.rb#4
NextRails::VERSION = T.let(T.unsafe(nil), String)

class Object < ::BasicObject
  include ::DeprecationTracker::KernelWarnTracker
  include ::Kernel
  include ::PP::ObjectMixin
end
