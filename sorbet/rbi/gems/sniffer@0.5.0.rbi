# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sniffer` gem.
# Please instead update this file by running `bin/tapioca gem sniffer`.


class Net::HTTP < ::Net::Protocol
  include ::Sniffer::Adapters::NetHttpAdapter
end

# Sniffer allows to log http requests
#
# source://sniffer//lib/sniffer/version.rb#3
module Sniffer
  class << self
    # source://sniffer//lib/sniffer.rb#36
    def clear!; end

    # @yield [@config]
    #
    # source://sniffer//lib/sniffer.rb#13
    def config; end

    # @yield [config]
    #
    # source://sniffer//lib/sniffer.rb#32
    def configure; end

    # source://sniffer//lib/sniffer.rb#46
    def data; end

    # source://sniffer//lib/sniffer.rb#23
    def disable!; end

    # source://sniffer//lib/sniffer.rb#19
    def enable!; end

    # @return [Boolean]
    #
    # source://sniffer//lib/sniffer.rb#27
    def enabled?; end

    # source://sniffer//lib/sniffer.rb#59
    def notify_response(data_item); end

    # source://sniffer//lib/sniffer.rb#40
    def reset!; end

    # source://isolator/1.0.1/lib/isolator/adapter_builder.rb#40
    def store(*_arg0, **_arg1, &_arg2); end
  end
end

# source://sniffer//lib/sniffer/adapters/net_http_adapter.rb#7
module Sniffer::Adapters; end

# Curl adapter
#
# source://sniffer//lib/sniffer/adapters/curb_adapter.rb#6
module Sniffer::Adapters::CurlAdapter
  # source://sniffer//lib/sniffer/adapters/curb_adapter.rb#21
  def http_post_with_sniffer(*args); end

  # source://sniffer//lib/sniffer/adapters/curb_adapter.rb#7
  def http_with_sniffer(verb); end

  private

  # source://sniffer//lib/sniffer/adapters/curb_adapter.rb#66
  def data_item; end

  # source://sniffer//lib/sniffer/adapters/curb_adapter.rb#71
  def sniffer_request(verb, *args); end

  # source://sniffer//lib/sniffer/adapters/curb_adapter.rb#89
  def sniffer_response(timing); end
end

# Only used when prepending, see all_prepend.rb
#
# source://sniffer//lib/sniffer/adapters/curb_adapter.rb#34
module Sniffer::Adapters::CurlAdapter::Prepend
  include ::Sniffer::Adapters::CurlAdapter

  # source://sniffer//lib/sniffer/adapters/curb_adapter.rb#37
  def http(verb); end

  # source://sniffer//lib/sniffer/adapters/curb_adapter.rb#51
  def http_post(*args); end
end

# Ethon adapter
#
# source://sniffer//lib/sniffer/adapters/ethon_adapter.rb#6
module Sniffer::Adapters::EthonAdapter; end

# overrides http_request method
#
# source://sniffer//lib/sniffer/adapters/ethon_adapter.rb#8
module Sniffer::Adapters::EthonAdapter::Http
  # source://sniffer//lib/sniffer/adapters/ethon_adapter.rb#9
  def http_request_with_sniffer(url, action_name, options = T.unsafe(nil)); end

  private

  # source://sniffer//lib/sniffer/adapters/ethon_adapter.rb#17
  def make_sniffer_request(url, action_name, options); end
end

# Only used when prepending, see all_prepend.rb
#
# source://sniffer//lib/sniffer/adapters/ethon_adapter.rb#33
module Sniffer::Adapters::EthonAdapter::Http::Prepend
  include ::Sniffer::Adapters::EthonAdapter::Http

  # source://sniffer//lib/sniffer/adapters/ethon_adapter.rb#36
  def http_request(url, action_name, options = T.unsafe(nil)); end
end

# overrides perform method
#
# source://sniffer//lib/sniffer/adapters/ethon_adapter.rb#45
module Sniffer::Adapters::EthonAdapter::Operations
  # source://sniffer//lib/sniffer/adapters/ethon_adapter.rb#47
  def perform_with_sniffer; end
end

# Only used when prepending, see all_prepend.rb
#
# source://sniffer//lib/sniffer/adapters/ethon_adapter.rb#82
module Sniffer::Adapters::EthonAdapter::Operations::Prepend
  include ::Sniffer::Adapters::EthonAdapter::Operations

  # source://sniffer//lib/sniffer/adapters/ethon_adapter.rb#85
  def perform; end
end

# Em-Http-Connection Adapter
#
# source://sniffer//lib/sniffer/adapters/eventmachine_adapter.rb#6
module Sniffer::Adapters::EventMachineAdapter; end

# Overrides #send_request, #parse_response, #on_body_data
#
# source://sniffer//lib/sniffer/adapters/eventmachine_adapter.rb#8
module Sniffer::Adapters::EventMachineAdapter::Client
  # source://sniffer//lib/sniffer/adapters/eventmachine_adapter.rb#19
  def on_body_data_with_sniffer(data); end

  # source://sniffer//lib/sniffer/adapters/eventmachine_adapter.rb#14
  def parse_response_header_with_sniffer(header, version, status); end

  # source://sniffer//lib/sniffer/adapters/eventmachine_adapter.rb#9
  def send_request_with_sniffer(head, body); end

  private

  # source://sniffer//lib/sniffer/adapters/eventmachine_adapter.rb#52
  def on_body_data_sniffer(data); end

  # source://sniffer//lib/sniffer/adapters/eventmachine_adapter.rb#44
  def parse_response_header_sniffer(header, _version, status); end

  # source://sniffer//lib/sniffer/adapters/eventmachine_adapter.rb#27
  def send_request_sniffer(_head, _body); end
end

# Only used when prepending, see all_prepend.rb
#
# source://sniffer//lib/sniffer/adapters/eventmachine_adapter.rb#60
module Sniffer::Adapters::EventMachineAdapter::Client::Prepend
  include ::Sniffer::Adapters::EventMachineAdapter::Client

  # source://sniffer//lib/sniffer/adapters/eventmachine_adapter.rb#73
  def on_body_data(data); end

  # source://sniffer//lib/sniffer/adapters/eventmachine_adapter.rb#68
  def parse_response_header(header, version, status); end

  # source://sniffer//lib/sniffer/adapters/eventmachine_adapter.rb#63
  def send_request(head, body); end
end

# Excon adapter
#
# source://sniffer//lib/sniffer/adapters/excon_adapter.rb#6
module Sniffer::Adapters::ExconAdapter
  # source://sniffer//lib/sniffer/adapters/excon_adapter.rb#7
  def request_with_sniffer(params = T.unsafe(nil), &block); end

  private

  # source://sniffer//lib/sniffer/adapters/excon_adapter.rb#39
  def request_sniffer_after(_params, benchmark, data_item); end

  # source://sniffer//lib/sniffer/adapters/excon_adapter.rb#21
  def request_sniffer_before(params); end
end

# Only used when prepending, see all_prepend.rb
#
# source://sniffer//lib/sniffer/adapters/excon_adapter.rb#51
module Sniffer::Adapters::ExconAdapter::Prepend
  include ::Sniffer::Adapters::ExconAdapter

  # source://sniffer//lib/sniffer/adapters/excon_adapter.rb#54
  def request(params = T.unsafe(nil), &block); end
end

# HTTP adapter
#
# source://sniffer//lib/sniffer/adapters/http_adapter.rb#6
module Sniffer::Adapters::HTTPAdapter
  # source://sniffer//lib/sniffer/adapters/http_adapter.rb#10
  def request_with_sniffer(verb, uri, opts = T.unsafe(nil)); end
end

# Only used when prepending, see all_prepend.rb
#
# source://sniffer//lib/sniffer/adapters/http_adapter.rb#63
module Sniffer::Adapters::HTTPAdapter::Prepend
  include ::Sniffer::Adapters::HTTPAdapter

  # source://sniffer//lib/sniffer/adapters/http_adapter.rb#66
  def request(*args); end
end

# HttpClient adapter
#
# source://sniffer//lib/sniffer/adapters/httpclient_adapter.rb#6
module Sniffer::Adapters::HTTPClientAdapter
  # source://sniffer//lib/sniffer/adapters/httpclient_adapter.rb#7
  def do_get_block_with_sniffer(req, proxy, conn, &block); end

  private

  # source://sniffer//lib/sniffer/adapters/httpclient_adapter.rb#43
  def do_get_block_sniffer_after(data_item, conn, benchmark); end

  # source://sniffer//lib/sniffer/adapters/httpclient_adapter.rb#26
  def do_get_block_sniffer_before(req); end
end

# Only used when prepending, see all_prepend.rb
#
# source://sniffer//lib/sniffer/adapters/httpclient_adapter.rb#58
module Sniffer::Adapters::HTTPClientAdapter::Prepend
  include ::Sniffer::Adapters::HTTPClientAdapter

  # source://sniffer//lib/sniffer/adapters/httpclient_adapter.rb#61
  def do_get_block(req, proxy, conn, &block); end
end

# Net::HTTP adapter
#
# source://sniffer//lib/sniffer/adapters/net_http_adapter.rb#9
module Sniffer::Adapters::NetHttpAdapter
  # source://sniffer//lib/sniffer/adapters/net_http_adapter.rb#10
  def request_with_sniffer(req, body = T.unsafe(nil), &block); end

  private

  # source://sniffer//lib/sniffer/adapters/net_http_adapter.rb#40
  def request_sniffer_after(data_item, benchmark); end

  # source://sniffer//lib/sniffer/adapters/net_http_adapter.rb#24
  def request_sniffer_before(req); end
end

# Only used when prepending, see all_prepend.rb
#
# source://sniffer//lib/sniffer/adapters/net_http_adapter.rb#52
module Sniffer::Adapters::NetHttpAdapter::Prepend
  include ::Sniffer::Adapters::NetHttpAdapter

  # source://sniffer//lib/sniffer/adapters/net_http_adapter.rb#55
  def request(req, body = T.unsafe(nil), &block); end
end

# HTTP adapter
#
# source://sniffer//lib/sniffer/adapters/patron_adapter.rb#6
module Sniffer::Adapters::PatronAdapter
  # source://sniffer//lib/sniffer/adapters/patron_adapter.rb#7
  def request_with_sniffer(action_name, url, headers, options = T.unsafe(nil)); end

  private

  # source://sniffer//lib/sniffer/adapters/patron_adapter.rb#40
  def request_sniffer_after(data_item, benchmark); end

  # source://sniffer//lib/sniffer/adapters/patron_adapter.rb#22
  def request_sniffer_before(action_name, url, headers, options); end
end

# Only used when prepending, see all_prepend.rb
#
# source://sniffer//lib/sniffer/adapters/patron_adapter.rb#52
module Sniffer::Adapters::PatronAdapter::Prepend
  include ::Sniffer::Adapters::PatronAdapter

  # source://sniffer//lib/sniffer/adapters/patron_adapter.rb#55
  def request(action_name, url, headers, options = T.unsafe(nil)); end
end

# Sniffer configuration
#
# source://sniffer//lib/sniffer/config.rb#9
class Sniffer::Config < ::Anyway::Config
  # source://sniffer//lib/sniffer/config.rb#42
  def capacity; end

  # @return [Boolean]
  #
  # source://sniffer//lib/sniffer/config.rb#38
  def capacity?; end

  def enabled?; end

  # @yield [@middleware]
  #
  # source://sniffer//lib/sniffer/config.rb#29
  def middleware; end

  # @return [Boolean]
  #
  # source://sniffer//lib/sniffer/config.rb#46
  def rotate?; end

  def store?; end
end

# Data class stores the data and controls capacity
#
# source://sniffer//lib/sniffer/data.rb#5
class Sniffer::Data < ::Array
  # source://sniffer//lib/sniffer/data.rb#6
  def store(data_item); end

  private

  # source://sniffer//lib/sniffer/data.rb#25
  def config; end

  # @return [Boolean]
  #
  # source://sniffer//lib/sniffer/data.rb#21
  def overflow?; end

  # source://sniffer//lib/sniffer/data.rb#16
  def rotate(data_item); end
end

# Sniffer data item stores a request info
#
# source://sniffer//lib/sniffer/data_item.rb#9
class Sniffer::DataItem
  include ::Dry::Initializer::Mixin::Root
  extend ::Dry::Initializer

  # @return [Boolean]
  #
  # source://sniffer//lib/sniffer/data_item.rb#34
  def allowed_to_sniff?; end

  # Sets the attribute request
  #
  # @param value the value to set the attribute request to.
  #
  # source://sniffer//lib/sniffer/data_item.rb#12
  def request=(_arg0); end

  # Sets the attribute response
  #
  # @param value the value to set the attribute response to.
  #
  # source://sniffer//lib/sniffer/data_item.rb#12
  def response=(_arg0); end

  # source://sniffer//lib/sniffer/data_item.rb#17
  def to_h; end

  # source://sniffer//lib/sniffer/data_item.rb#30
  def to_json(*_args); end

  # source://sniffer//lib/sniffer/data_item.rb#24
  def to_log; end
end

# Basic object for request and response objects
#
# source://sniffer//lib/sniffer/data_item.rb#41
class Sniffer::DataItem::HttpObject
  include ::Dry::Initializer::Mixin::Root
  extend ::Dry::Initializer

  # @raise [NotImplementedError]
  #
  # source://sniffer//lib/sniffer/data_item.rb#44
  def log_message; end

  # source://sniffer//lib/sniffer/data_item.rb#48
  def log_settings; end
end

# Stores http request data
#
# source://sniffer//lib/sniffer/data_item.rb#54
class Sniffer::DataItem::Request < ::Sniffer::DataItem::HttpObject
  # Sets the attribute body
  #
  # @param value the value to set the attribute body to.
  #
  # source://sniffer//lib/sniffer/data_item.rb#62
  def body=(_arg0); end

  # Sets the attribute headers
  #
  # @param value the value to set the attribute headers to.
  #
  # source://sniffer//lib/sniffer/data_item.rb#62
  def headers=(_arg0); end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://sniffer//lib/sniffer/data_item.rb#62
  def host=(_arg0); end

  # Sets the attribute method
  #
  # @param value the value to set the attribute method to.
  #
  # source://sniffer//lib/sniffer/data_item.rb#62
  def method=(_arg0); end

  # Sets the attribute port
  #
  # @param value the value to set the attribute port to.
  #
  # source://sniffer//lib/sniffer/data_item.rb#62
  def port=(_arg0); end

  # Sets the attribute query
  #
  # @param value the value to set the attribute query to.
  #
  # source://sniffer//lib/sniffer/data_item.rb#62
  def query=(_arg0); end

  # source://sniffer//lib/sniffer/data_item.rb#64
  def to_h; end

  # source://sniffer//lib/sniffer/data_item.rb#76
  def to_log; end
end

# Stores http response data
#
# source://sniffer//lib/sniffer/data_item.rb#98
class Sniffer::DataItem::Response < ::Sniffer::DataItem::HttpObject
  # Sets the attribute body
  #
  # @param value the value to set the attribute body to.
  #
  # source://sniffer//lib/sniffer/data_item.rb#99
  def body=(_arg0); end

  # Sets the attribute headers
  #
  # @param value the value to set the attribute headers to.
  #
  # source://sniffer//lib/sniffer/data_item.rb#99
  def headers=(_arg0); end

  # Sets the attribute status
  #
  # @param value the value to set the attribute status to.
  #
  # source://sniffer//lib/sniffer/data_item.rb#99
  def status=(_arg0); end

  # Sets the attribute timing
  #
  # @param value the value to set the attribute timing to.
  #
  # source://sniffer//lib/sniffer/data_item.rb#99
  def timing=(_arg0); end

  # source://sniffer//lib/sniffer/data_item.rb#106
  def to_h; end

  # source://sniffer//lib/sniffer/data_item.rb#116
  def to_log; end
end

# Middleware is code configured to run before/after
# storing sniffed request/response
# To add middleware
#
# Sniffer.middleware do |chain|
#   chain.add MyHook
# end
#
# class MyHook
#   def request(data_item)
#     puts "Before request work"
#     yield
#     puts "After request work"
#   end
#
#   def response(data_item)
#     puts "Before response work"
#     yield
#     puts "After response work"
#   end
# end
#
# source://sniffer//lib/sniffer/middleware/entry.rb#4
module Sniffer::Middleware; end

# Stores all the middleware configs
#
# source://sniffer//lib/sniffer/middleware/chain.rb#29
class Sniffer::Middleware::Chain
  include ::Enumerable

  # source://sniffer//lib/sniffer/middleware/chain.rb#40
  def add(klass, *args); end

  # source://sniffer//lib/sniffer/middleware/chain.rb#36
  def each(&block); end

  # source://sniffer//lib/sniffer/middleware/chain.rb#32
  def entries; end

  # source://sniffer//lib/sniffer/middleware/chain.rb#48
  def invoke_request(*args); end

  # source://sniffer//lib/sniffer/middleware/chain.rb#60
  def invoke_response(*args); end

  # source://sniffer//lib/sniffer/middleware/chain.rb#44
  def remove(klass); end
end

# Middleware entry, represented with klass and arguments for initializer
#
# source://sniffer//lib/sniffer/middleware/entry.rb#6
class Sniffer::Middleware::Entry
  # @return [Entry] a new instance of Entry
  #
  # source://sniffer//lib/sniffer/middleware/entry.rb#9
  def initialize(klass, *args); end

  # Returns the value of attribute klass.
  #
  # source://sniffer//lib/sniffer/middleware/entry.rb#7
  def klass; end

  # source://sniffer//lib/sniffer/middleware/entry.rb#14
  def make_new; end
end

# Response logging build-in middleware
#
# source://sniffer//lib/sniffer/middleware/logger.rb#6
class Sniffer::Middleware::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://sniffer//lib/sniffer/middleware/logger.rb#9
  def initialize(logger, severity); end

  # Returns the value of attribute logger.
  #
  # source://sniffer//lib/sniffer/middleware/logger.rb#7
  def logger; end

  # source://sniffer//lib/sniffer/middleware/logger.rb#14
  def request(_data_item); end

  # source://sniffer//lib/sniffer/middleware/logger.rb#18
  def response(data_item); end

  # Returns the value of attribute severity.
  #
  # source://sniffer//lib/sniffer/middleware/logger.rb#7
  def severity; end
end

# match request with white and black lists
#
# source://sniffer//lib/sniffer/request_policy.rb#5
module Sniffer::RequestPolicy
  class << self
    # source://sniffer//lib/sniffer/request_policy.rb#7
    def call(request); end

    private

    # @return [Boolean]
    #
    # source://sniffer//lib/sniffer/request_policy.rb#24
    def blacklist_url?(url); end

    # source://sniffer//lib/sniffer/request_policy.rb#28
    def config; end

    # @return [Boolean]
    #
    # source://sniffer//lib/sniffer/request_policy.rb#20
    def whitelist_url?(url); end
  end
end

# source://sniffer//lib/sniffer/version.rb#4
Sniffer::VERSION = T.let(T.unsafe(nil), String)
